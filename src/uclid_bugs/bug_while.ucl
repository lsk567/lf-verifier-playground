/**
 * A helper module for common types and constants
 */
module Common {
    // FILE_SPECIFIC
    type reactor_id_t = enum { A, B, NULL };
    type trigger_id_t = enum { A_STARTUP, B_STARTUP, B_IN, N_NULL };
    type token_t      = integer; // To support "anytype"

    // COMMON
    type instant_t    = integer;
    type is_present_t = boolean;

    /**
     * Use tuple instead of record for easy instantiation,
     * the event_t tuple is defined as [from_reactor_id,
     * to_reactor_id, time_of_release, trigger_id, token]
     *
     * Note: if type overload is enabled, the token_t field
     * can be reduced to 1 field. Otherwise, multiple token_t
     * fields are needed depending on the LF program.
     */
    // Note: instant_t and is_present, redundant?
    type event_t = {
                     instant_t,     // Tag
                     reactor_id_t,  // From
                     reactor_id_t,  // To
                     trigger_id_t,  // Trigger
                     token_t,       // Token
                     is_present_t   // Is_present
                   };

    /*
    // TODO: replace concrete __null__ instantiation with abstract const.
    const null_event : event_t;
    axiom (forall (e : event_t) :: null_event._1 > e._1);
    */
}

module EventQ
{
    type * = Common.*;

    type op_t = enum { PUSH, POP };
    type index_t = integer;
    type count_t = integer;
    type data_t = event_t;
    type queue_t = {
                    data_t,
                    data_t,
                    data_t,
                    data_t,
                    data_t
                   };

    const SIZE : integer = 5;
    
    var NULL_EVENT : data_t;

    input op : op_t;
    input data : data_t;
    output out : data_t; // Output from popQ()

    var contents : queue_t;
    var count : integer;
    var __idx__ : integer;
    var __done__ : boolean;

    define get(q : queue_t, i : integer) : data_t
    = if (i == 1) then q._1 else
        (if (i == 2) then q._2 else
            (if (i == 3) then q._3 else
                (if (i == 4) then q._4 else
                    if (i == 5) then q._5 else
                        NULL_EVENT)));

    define set(q : queue_t, i : integer, v : data_t) : queue_t
    = if (i == 1) then {v, q._2, q._3, q._4, q._5} else
        (if (i == 2) then {q._1, v, q._3, q._4, q._5} else
            (if (i == 3) then {q._1, q._2, v, q._4, q._5} else
                (if (i == 4) then {q._1, q._2, q._3, v, q._5} else (
                    if (i == 5) then {q._1, q._2, q._3, q._4, v} else
                        q))));

    define inQ(q : queue_t, v : data_t) : boolean
    = (exists (i : index_t) ::
        (i >= 1 && i <= SIZE) && get(q, i) == v);

    define isNULL(d : data_t) : integer
    = if (d == NULL_EVENT) then 1 else 0;

    define countQ(q : queue_t) : integer
    = SIZE - (isNULL(q._1) + isNULL(q._2) + isNULL(q._3) + 
                isNULL(q._4) + isNULL(q._5));

    procedure pushQ()
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __idx__, __done__;
        // requires (op == POP);
        requires (NULL_EVENT == { -1, NULL, NULL, N_NULL, -1, false });
        requires (count == countQ(contents));
        ensures ((count < SIZE
                && data != NULL_EVENT) 
                ==> (countP == count + 1
                     && inQ(contentsP, data)));
        ensures (count >= SIZE ==> countP == count);
    {
        __idx__ = 1;
        __done__ = false;
        
        /** 
         * While loop does not behave correctly.
         * The problem might be in the while loop
         * rewrite pass.
         */
        /*
        while(__idx__ <= SIZE && !__done__) {
            if (get(contents, __idx__) == NULL_EVENT) {
                contentsP = set(contents, __idx__, data);
                countP = count + 1;
                __done__ = true;
            }
            __idx__ = __idx__ + 1;
        }
        */

        for (i : integer) in range(1, SIZE) {
            if (get(contents, i) == NULL_EVENT &&
                !__done__ &&
                data != NULL_EVENT)
            {
                contentsP = set(contents, i, data);
                countP = count + 1;
                __done__ = true;
            }
        }

        if (!__done__) {
            contentsP = contents;
            countP = count;
        }
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        count = 0;
        contents = {
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT
                   };

        __idx__ = 0;
        __done__ = false;
    }

    next {
        case
            (op == PUSH) : {
                call (contents', count') = pushQ();
            }
            (op == POP) : {
                call (contents', count', out') = popQ();
            }
        esac
    }

    control {
        v = verify(pushQ);
        check;
        print_results;
        v.print_cex();
    }
}
    
module main {
    type * = EventQ.*;

    var op : op_t;
    var data : data_t;

    instance eq : EventQ(op : (op), data : (data));

    init {
        op = PUSH;
        data = { 1, A, B, B_IN, 5, true };
    }

    next {
        next(eq);
    }

    control {
        v = unroll(10);
        check;
        print_results;
        v.print_cex();
    }
}
