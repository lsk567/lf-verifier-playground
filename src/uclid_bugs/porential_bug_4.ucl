/**
 * A new formulation of the reactor semantics.
 */

/**
 * A helper module for common types and constants
 */
module Common {
    // FILE_SPECIFIC
    type reactor_id_t = enum { A, B, NULL };
    type trigger_id_t = enum { A_OUT, B_IN, N_NULL };
    type token_t      = integer; // To support "anytype"

    // COMMON
    type instant_t    = integer;
    type is_present_t = boolean;

    /**
     * Use tuple instead of record for easy instantiation,
     * the event_t tuple is defined as [from_reactor_id,
     * to_reactor_id, time_of_release, trigger_id, token]
     *
     * Note: if type overload is enabled, the token_t field
     * can be reduced to 1 field. Otherwise, multiple token_t
     * fields are needed depending on the LF program.
     */
    type event_t = {
                     instant_t,     // Tag
                     reactor_id_t,  // From
                     reactor_id_t,  // To
                     trigger_id_t,  // Trigger
                     token_t,       // Token
                     is_present_t   // Is_present
                   };

    /*
    // TODO: replace concrete __null__ instantiation with abstract const.
    const null_event : event_t;
    axiom (forall (e : event_t) :: null_event._1 > e._1);
    */
}

module EventQ
{
    type * = Common.*;

    type op_t = enum { PUSH, POP };
    type index_t = integer;
    type count_t = integer;
    type data_t = event_t;
    type queue_t = [index_t]data_t;
    
    const END : integer = 4; // The size of pqueue is 5.
    var NULL_EVENT : data_t;

    input op : op_t;
    input data : data_t;

    output out : data_t; // Output from popQ()

    var contents : queue_t;
    var count : integer; 

    var __done__ : boolean;
    var __min__ : data_t;
    var __min_idx__ : index_t;

    define in_queue(q : [index_t]data_t, v : data_t) : boolean =
        (exists (i : index_t) ::
            (i >= 0 && i <= END) && q[i] == v);

    procedure pushQ()
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __done__;
        requires ( data == NULL_EVENT ); // For printout purposes
        /*
        requires ( op == PUSH ); // OP must be PUSH
        requires ( count >= 0 && count < END + 1 ); // PQueue cannot be full. 
        // The meaning of not being full.
        requires (exists (i : integer) ::
                    (i >= 0 && i < count) && contents[i] == NULL_EVENT);
        // Require the array does not contain the element
        requires ( !in_queue(contents, data) );
        // When these two post-conditions are disabled,
        // the queue output behaves normally.
        ensures ( countP == count + 1 );
        ensures ( in_queue(contentsP, data) );
        */
    {
        __done__ = false; // To prevent repetitive updates.
        // contentsP = contents; // Can only assign to return once.
        for (i : integer) in range(0, END) {
            if (contents[i] == NULL_EVENT && !__done__) {
                contentsP = contents[i -> data];
                countP = count + 1;
                __done__ = true;
            }
        }
        // Need to explicitly specify the values in the next state.
        if (!__done__) {
            contentsP = contents;
            countP = count;
        }
    }

    procedure popQ()
        returns (
            contentsP : [index_t]data_t,
            countP : integer,
            out : data_t
        )
        modifies __min__, __min_idx__;
        /*
        requires (op == POP);
        // Must not be empty
        requires ( exists (i : integer) ::
                    (i >= 0 && i <= END) &&
                    contents[i]._1 >= 0 );
        ensures (countP == count - 1);
        */
    {
        __min__ = contents[0];
        __min_idx__ = 0; 

        // Find the minimum
        for (i : integer) in range(0, END) {
            if (contents[i] != NULL_EVENT) {
                if (__min__ == NULL_EVENT) {
                    __min__ = contents[i];
                    __min_idx__ = i;
                }
                else {
                    if (contents[i]._1 < __min__._1) {
                        __min__ = contents[i];
                        __min_idx__ = i;
                    }
                }
            }
        }

        out = __min__;
        contentsP = contents[__min_idx__ -> NULL_EVENT];
        /**
         * We don't need to address the __min__ == -1 case,
         * since the pre-condition says the queue is not empty.
         */
        countP = count - 1;
    }

    init {
        count = 0;

        /*
        contents[0] = { 2, A, B, A_OUT, 1, true };
        contents[1] = { 1, A, B, A_OUT, 5, true };
        for (i : integer) in range(2, END) {
            contents[i] = NULL_EVENT;
        }
        */

        for (i : integer) in range(0, END) {
            contents[i] = NULL_EVENT;
        }

        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        __done__ = false;
        __min__ = NULL_EVENT;
    }

    next {
        case
            (op == PUSH) : {
                call (contents', count') = pushQ();
            }
            (op == POP) : {
                call (contents', count', out') = popQ();
            }
        esac;
    }

    control {
        vPush = verify(pushQ);
        vPop = verify(popQ);
        check;
        print_results;
        vPush.print_cex();
        vPop.print_cex();
    }
}

module RTI {
    type * = EventQ.*;
    const * = EventQ.*;

    // Auto-generated
    input in_A : event_t;  
    // input _in_B : [index_t]event_t;
    
    output out_A : event_t;
    /**
     * Notes:
     * These two queues can potentially be merged
     * and produce an _out_reaction array.
     * Similarly, A and B are merged into one module
     * containing all reactions and state variables.
     * This allows all declarations to be in one local scope.
     * But need to check whether this is actually useful,
     * since we can do the same things in main module.
     *
     * The same _out_reaction can be fed to both A and B,
     * where they selectively react to triggers with
     * them as the destinations.
     */
    // output _out_A : [index_t]event_t;
    // output _out_B : [index_t]event_t;
    // output _out_A_tail : integer;
    // output _out_B_tail : integer;

    // Shared
    var NULL_EVENT : event_t;

    // Event queue variables 
    // Both queues share these two fields for now.
    // If need be, separate them and create a NoOp operation for queues.
    var op : op_t;
    var data : data_t;

    /*
    // Reaction queue variables 
    var __rq_op__ : op_t;
    var __rq_in__ : [index_t]event_t;
    var __rq_in_tail__ : integer;
    var __rq_out__ : [index_t]event_t;
    var __rq_out_tail__ : integer;
    var __rq_contents__ : [index_t]event_t;
    */

    // Event queue and reaction queue
    instance event_q : EventQ(op : (op), data : (data));

    /*
    instance reaction_q : ReactionQ(op : (__rq_op__), 
                                _in : (__rq_in__),
                                _in_tail : (__rq_in_tail__),
                                _out : (__rq_out__),
                                _out_tail : (__rq_out_tail__));
    */

    // The current clock value
    var t : instant_t;

    /**
     * Selects a queue to push into.
     */
    procedure push_events()
        returns (
            _op : op_t,
            _data : data_t
        )
    {
        _op = PUSH;
        _data = in_A;
    }

    /**
     * Selects a queue to pop from.
     */
    procedure pop_events()
        returns (
            
        )
    {
        
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
    }

    /**
     * The next() function facilitates the transition of
     * the system composed by reactors.
     *
     * The next() function pops events from the queue,
     * pushes events into the queue,
     * and check to see if it can advance time.
     */
    next {
        /**
         * Event queue should be popped when
         * 1. Reaction queue is empty;
         * 2. There are no active events processed by reactors.
         */

        /**
         * 1. Check if there are input events. If so, push them into
         *    appropriate queues (might take multiple steps).
         * 2. If there are no more input events, pop from reaction queue
         *    first. When the reaction queue becomes empty, pop from
         *    event queue and advance time.
         */
        if (in_A != NULL_EVENT) {
            call (op', data') = push_events();
        }
        else {
            // if (in_B != NULL_EVENT) { ... }

            // At this point there are no more events from both reactors.
            // Pop from queue
            call () = pop_events(); 
        }

        // When the reaction queue is added, need to decide on a specific
        // queue to advance.
        // Advance event queue
        next(event_q);
    }

}

module A {
    // TODO
}

module B {
    // TODO
}

module main {
    /*
     * The import here raises redeclaration of type A error
     */
    type * = EventQ.*;
    const * = EventQ.*;

    var in_A : event_t; 

    instance rti : RTI(in_A : (), out_A : ());
}

