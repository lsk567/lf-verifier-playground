module main {

    /********
     * Time *
     ********/
    type timestamp_t = integer; // unit is nanoseconds
    type microstep_t = integer;
    type tag_t = {
        timestamp_t,
        microstep_t
    };
    // fixme: in lf, the interval is an integer.
    type interval_t  = tag_t;
    
    // projection macros
    define pi1(t : tag_t)   : timestamp_t   = t._1;         // get timestamp from tag
    define pi2(t : tag_t)   : microstep_t   = t._2;         // get microstep from tag
    
    // interval constructor
    define zero() : interval_t
    = {0, 0};
    define startup() : interval_t
    = zero();
    define mstep() : interval_t
    = {0, 1};
    define nsec(t : integer) : interval_t
    = {t, 0};
    define usec(t : integer) : interval_t
    = {t * 1000, 0};
    define msec(t : integer) : interval_t
    = {t * 1000000, 0};
    define sec(t : integer) : interval_t
    = {t * 1000000000, 0};
    define inf() : interval_t
    = {-1, 0};
    
    // helper function
    define isInf(i : interval_t) : boolean
    = pi1(i) < 0;
    
    // tag comparison
    define tag_later(t1 : tag_t, t2 : tag_t) : boolean
    = pi1(t1) > pi1(t2)
        || (pi1(t1) == pi1(t2) && pi2(t1) > pi2(t2))
        || (isInf(t1) && !isInf(t2));
    
    define tag_same(t1 : tag_t, t2 : tag_t) : boolean
    = t1 == t2;
    
    define tag_earlier(t1 : tag_t, t2 : tag_t) : boolean
    = pi1(t1) < pi1(t2)
        || (pi1(t1) == pi1(t2) && pi2(t1) < pi2(t2))
        || (!isInf(t1) && isInf(t2));
    
    // tag algebra
    define tag_schedule(t : tag_t, i : interval_t) : tag_t
    = if (!isInf(t) && pi1(i) == 0 && !isInf(i))
        then { pi1(t), pi2(t) + 1 } // microstep delay
        else ( if (!isInf(t) && pi1(i) > 0 && !isInf(i))
            then { pi1(t) + pi1(i), 0 }
            else inf());
    
    define tag_delay(t : tag_t, i : interval_t) : tag_t
    = if (!isInf(t) && !isInf(i))
        then { pi1(t) + pi1(i), pi2(t) + pi2(i) }
        else inf();
    
    // only consider timestamp for now.
    define tag_diff(t1, t2: tag_t) : interval_t
    = if (!isInf(t1) && !isInf(t2))
        then { pi1(t1) - pi1(t2), pi2(t1) - pi2(t2) }
        else inf();
     


    /**********************************
     * Reactions & Connectivity Graph *
     *********************************/
    // Reaction ids
    type rxn_t = enum {  
        NULL,    // NULL 
        AddOne_1 // reactions
    };

    type state_t = {
        integer, // _in
        integer  // out
    };
     

     
    /********************
     * Trace Definition *
     *******************/
    const START : integer = 0;
    const END : integer = 2;
    
    define in_range(num : integer) : boolean
    = num >= START && num <= END;
    
    type step_t = integer;
    type event_t = { rxn_t, tag_t, state_t };
    type trace_t = { 
        event_t,
        event_t,
        event_t
    };
    
    // mark the start of the trace.
    var start : timestamp_t;
    assume(start == 0);
     
    // declare the trace
    var trace : trace_t;



    /*****************
     * helper macros *
     ****************/
    // helper macro that returns an element based on index
    define get(tr : trace_t, i : step_t) : event_t 
    = if (i == 0) then tr._1 else (
        if (i == 1) then tr._2 else (
            if (i == 2) then tr._3 else (
                { NULL, inf(), { 0, 0 } }
            )
        )
    );
    define elem(i : step_t) : event_t
    = get(trace, i);
     
    // projection macros
    define rxn(i : step_t) : rxn_t      = elem(i)._1;
    define  g(i : step_t) : tag_t     = elem(i)._2;
    define  s(i : step_t) : state_t   = elem(i)._3;

    // application specific: state variables
    define    _in(s : state_t) : integer = s._1;
    define    out(s : state_t) : integer = s._2;
    define isNULL(i : step_t) : boolean = rxn(i) == NULL;



    /************
     * Topology *
     ************/
    // nothing for this program



    /*********************
     * Reactor Semantics *
     *********************/
    /** transition relation **/
    // transition relation constrains future states
    // based on previous states.

    // [non-federated] events are processed in timestamped order.
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> (tag_earlier(g(i), g(j)) ==> i < j));
    
    /* reaction body */
    // pre: true
    // post: out == _in + 1
    axiom(forall (i : integer) :: (i > START && i <= END) ==> 
        (rxn(i) == AddOne_1 ==> 
            out(s(i)) == _in(s(i)) + 1));
    
    // the same event can only trigger once in a logical instant
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((rxn(i) == rxn(j) && i != j)
            ==> !tag_same(g(i), g(j))));
    
    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (rxn(j) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> rxn(i) != NULL)
    )));

    // All tags should be positive
    // Note: the 1st state is not constrainted, since
    //       this is formulated as a transition relation
    //       which does not constrain the initial state.
    axiom(forall (i : integer) :: (i > START && i <= END)
        ==> pi1(g(i)) >= 0);

    // All microsteps are positive
    axiom(forall (i : integer) :: (i > START && i <= END)
        ==> pi2(g(i)) >= 0);

    /** helper invariant **/
    // helper invariant constrains the current state at all times.
     
    // begin the frame at the start time specified.
    define frame_start(i : integer) : boolean
    = tag_same(g(i), {start, 0})
        || tag_later(g(i), {start, 0});

    define auxiliary_invariant(i : integer) : boolean
    = frame_start(i);



    /****************
     * Connectivity *
     ****************/
    // axiom(is_triggered_by_startup(AddOne_1));



    /**************
     * Properties *
     **************/
    // inductive
    // define prop(i : integer) : boolean
    //     = (rxn(i) == AddOne_1 ==> out(s(i)) == _in(s(i)) + 1);

    // invariant
    define inv(i : integer) : boolean
        = (rxn(i) == AddOne_1 ==> out(s(i)) != _in(s(i)));

    // not inductive
    // define prop(i : integer) : boolean
    //     = (rxn(i) == AddOne_1 ==> out(s(i)) < 10);



    /*********************
     * Initial Condition *
     *********************/
    define initial_condition() : boolean
    = start == 0
        && rxn(0) == NULL
        && g(0) == {0, 0}
        && out(s(0)) == 0
        && _in(s(0)) == 0;



    /***************
     * K-induction *
     ***************/
    // initialization
    property initialization : initial_condition() ==>
        (forall (i : integer) ::
            (i >= START && i <= END)
                ==> (
                    inv(i)
                    && auxiliary_invariant(i)
                ));

    // Note: state 0 needs to be unconstrained.
    // consecution
    property consecution : (forall (i : integer) ::
        (i >= START && i < END) ==> (inv(i) && auxiliary_invariant(i)))
            ==> (inv(END) && auxiliary_invariant(END));


    //////////////////////////////////////////////////
     
    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
