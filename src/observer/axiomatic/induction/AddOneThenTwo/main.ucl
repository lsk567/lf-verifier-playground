module main {

    /********
     * Time *
     ********/
    type timestamp_t = integer; // unit is nanoseconds
    type microstep_t = integer;
    type tag_t = {
        timestamp_t,
        microstep_t
    };
    // fixme: in lf, the interval is an integer.
    type interval_t  = tag_t;
    
    // projection macros
    define pi1(t : tag_t)   : timestamp_t   = t._1;         // get timestamp from tag
    define pi2(t : tag_t)   : microstep_t   = t._2;         // get microstep from tag
    
    // interval constructor
    define zero() : interval_t
    = {0, 0};
    define mstep() : interval_t
    = {0, 1};
    define nsec(t : integer) : interval_t
    = {t, 0};
    define usec(t : integer) : interval_t
    = {t * 1000, 0};
    define msec(t : integer) : interval_t
    = {t * 1000000, 0};
    define sec(t : integer) : interval_t
    = {t * 1000000000, 0};
    define inf() : interval_t
    = {-1, 0};
    
    // helper function
    define isInf(i : interval_t) : boolean
    = pi1(i) < 0;
    
    // tag comparison
    define tag_later(t1 : tag_t, t2 : tag_t) : boolean
    = pi1(t1) > pi1(t2)
        || (pi1(t1) == pi1(t2) && pi2(t1) > pi2(t2))
        || (isInf(t1) && !isInf(t2));
    
    define tag_same(t1 : tag_t, t2 : tag_t) : boolean
    = t1 == t2;
    
    define tag_earlier(t1 : tag_t, t2 : tag_t) : boolean
    = pi1(t1) < pi1(t2)
        || (pi1(t1) == pi1(t2) && pi2(t1) < pi2(t2))
        || (!isInf(t1) && isInf(t2));
    
    // tag algebra
    define tag_schedule(t : tag_t, i : interval_t) : tag_t
    = if (!isInf(t) && pi1(i) == 0 && !isInf(i))
        then { pi1(t), pi2(t) + 1 } // microstep delay
        else ( if (!isInf(t) && pi1(i) > 0 && !isInf(i))
            then { pi1(t) + pi1(i), 0 }
            else inf());
    
    define tag_delay(t : tag_t, i : interval_t) : tag_t
    = if (!isInf(t) && !isInf(i))
        then { pi1(t) + pi1(i), pi2(t) + pi2(i) }
        else inf();
    
    // only consider timestamp for now.
    define tag_diff(t1, t2: tag_t) : interval_t
    = if (!isInf(t1) && !isInf(t2))
        then { pi1(t1) - pi1(t2), pi2(t1) - pi2(t2) }
        else inf();
     
    /**********************************
     * Reactions & Connectivity Graph *
     *********************************/
    // Reaction ids
    type rxn_t = enum {  
        NULL,
        source_1,
        component_1,
        component_2,
        sink_1
    };

    type state_t = {
        integer, // source.out
        integer, // component._in
        integer, // component.out
        integer, // component._s
        integer  // sink._in
    };
     
    
    /********************
     * trace definition *
     *******************/
    const START : integer = 0;
    const END   : integer = 4;
    
    define in_range(num : integer) : boolean
    = num >= START && num <= END;
    
    type step_t  = integer;
    type event_t = { rxn_t, tag_t, state_t };
    type trace_t = { 
        event_t,
        event_t,
        event_t,
        event_t,
        event_t
    };
    
    // mark the start of the trace.
    var start : timestamp_t;
     
    // declare the trace
    var trace : trace_t;

    /*****************
     * helper macros *
     ****************/
    // helper macro that returns an element based on index
    define get(tr : trace_t, i : step_t) : event_t 
    = if (i == 0) then tr._1 else (
        if (i == 1) then tr._2 else (
            if (i == 2) then tr._3 else (
                if (i == 3) then tr._4 else (
                    if (i == 4) then tr._5 else (
                        { NULL, inf(), { 0, 0, 0, 0, 0 } }
                    )
                )
            )
        )
    );
    define elem(i : step_t) : event_t
    = get(trace, i);
    define isNULL(i : step_t)  : boolean = rxn(i) == NULL;
     
    // projection macros
    define rxn(i : step_t) : rxn_t      = elem(i)._1;
    define   g(i : step_t) : tag_t      = elem(i)._2;
    define   s(i : step_t) : state_t    = elem(i)._3;

    // application specific: state variables
    define    source_out(s : state_t) : integer = s._1;
    define component__in(s : state_t) : integer = s._2;
    define  component__s(s : state_t) : integer = s._3;
    define component_out(s : state_t) : integer = s._4;
    define      sink__in(s : state_t) : integer = s._5;


    /***************************
     * Topological Abstraction *
     ***************************/
    define delay(r1, r2 : rxn_t) : interval_t
    = if (r1 == source_1 && r2 == component_1) then zero() else (
        if (r1 == component_1 && r2 == component_2) then sec(1) else (
            if (r1 == component_2 && r2 == sink_1) then zero() else (
                inf()
            )));

    // FIXME: Would be nice if UCLID supports recursion of macros.
    // Counterfactual causality. 
    // Happened-before relation defined for a local reactor.
    // Used to preserve trace ordering.
    define hb(e1, e2 : event_t) : boolean
    = ((e1._1 == source_1 && e2._1 == component_1)
        || (e1._1 == component_1 && e2._1 == component_2)
        || (e1._1 == component_2 && e2._1 == sink_1))
    && pi1(e2._2) - pi1(e1._2) == pi1(delay(e1._1, e2._1));

    define startup_triggers(n : rxn_t) : boolean
    = // if startup is within frame, put the events in the trace.
        ((start == 0) ==> (exists (i : integer) :: in_range(i)
            && rxn(i) == n && tag_same(g(i), zero())));

    // Note: The current formulation of "triggers" precludes
    //       partial reaction triggering chain.
    // This includes the possibility that upstream does NOT output.
    define triggers_via_logical_action
        (upstream, downstream : rxn_t, delay : interval_t) : boolean
    = forall (i : integer) :: in_range(i)
        ==> (rxn(i) == downstream 
            ==> (exists (j : integer) :: in_range(j)
                && rxn(j) == upstream 
                && g(i) == tag_schedule(g(j), delay)));

    define triggers_via_logical_connection
        (upstream, downstream : rxn_t, delay : interval_t) : boolean
    = forall (i : integer) :: in_range(i)
        ==> (rxn(i) == downstream 
            ==> (exists (j : integer) :: in_range(j)
                && rxn(j) == upstream 
                && g(i) == tag_delay(g(j), delay)));

    /*********************
     * Reactor Semantics *
     *********************/
    /** transition relation **/
    // transition relation constrains future states
    // based on previous states.

    // [non-federated] events are processed in timestamped order.
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> (hb(elem(i), elem(j)) ==> i < j));
    
    // the same event can only trigger once in a logical instant
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((rxn(i) == rxn(j) && i != j)
            ==> !tag_same(g(i), g(j))));
    
    /*
    // FIXME: Do not uncomment this, if you want to the 1st state to be NULL!
    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (rxn(j) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> rxn(i) != NULL)
    )));
    */

    // All tags should be positive
    // Note: the 1st state is not constrainted, since
    //       this is formulated as a transition relation
    //       which does not constrain the initial state.
    axiom(forall (i : integer) :: (i > START && i <= END)
        ==> pi1(g(i)) >= 0);

    // All microsteps are positive
    axiom(forall (i : integer) :: (i > START && i <= END)
        ==> pi2(g(i)) >= 0);


    /*************
     * Reactions *
     *************/
    // pre: true
    // post: source.out == 1
    axiom(forall (i : integer) :: (i > START && i <= END) ==> 
        ((rxn(i) == source_1 ==> 
            source_out(s(i)) == 1)
        // Default value: output 0, though it should be absent.
        && (rxn(i) != source_1 ==> 
            source_out(s(i)) == -1)));
    
    // pre: true
    // post: component._s == component._in
    axiom(forall (i : integer) :: (i > START && i <= END) ==> 
        (rxn(i) == component_1 ==> 
            component__s(s(i)) == component__in(s(i)))
        // Default value: same as last state
        && (rxn(i) != component_1 ==> 
            component__s(s(i)) == component__s(s(i - 1))));

    // pre: true
    // post: component.out == component._s + 2
    axiom(forall (i : integer) :: (i > START && i <= END) ==> 
        (rxn(i) == component_2 ==> 
            component_out(s(i)) == component__s(s(i)) + 2)
        // Default value: 0, though it should be absent.
        && (rxn(i) != component_2 ==> 
            component_out(s(i)) == -1));

    // pre: true
    // post: true 
    axiom(forall (i : integer) :: (i > START && i <= END) ==> 
        (rxn(i) == component_2 ==> true));

    /******************************************
     * Shared Variable Induced by Connections *
     ******************************************/
    // Constrains input port values

    // FIXME: Put them in auxiliary invariant?
    // source.out -> component._in 
    axiom(forall (i : integer) :: (i >= START && i <= END)
        ==> (
            (rxn(i) == source_1 ==> component__in(s(i)) == source_out(s(i)))
            && (rxn(i) != source_1 ==> component__in(s(i)) == component__in(s(i - 1)))
        ));

    // component.out -> sink._in 
    axiom(forall (i : integer) :: (i >= START && i <= END)
        ==> (
            (rxn(i) == component_2 ==> sink__in(s(i)) == component_out(s(i)))
            && (rxn(i) != component_2 ==> sink__in(s(i)) == sink__in(s(i - 1)))
        ));

    /** helper invariant **/
    // helper invariant constrains the current state at all times.
     
    define helper_invariant(i : integer) : boolean
    = true; // Trivial for now

    /****************
     * Connectivity *
     ****************/
    axiom(startup_triggers(source_1));
    axiom(triggers_via_logical_connection(source_1, component_1,
        delay(source_1, component_1)));
    axiom(triggers_via_logical_action(component_1, component_2,
        delay(component_1, component_2)));
    axiom(triggers_via_logical_connection(component_2, sink_1,
        delay(component_2, sink_1)));


    /**************
     * Properties *
     **************/
    define prop(i : step_t) : boolean
    // = (rxn(i) == sink_1) ==> (sink__in(s(i)) != 3); // Expect a witness.
    = (rxn(i) == sink_1) ==> (sink__in(s(i)) == 3); // Expect a witness.
    // = rxn(i) != source_1;
    // = (source_out(s(i)) != 1); 
    // = (rxn(i) == component_2 ==> false);
    // = (rxn(i) == source_1 ==> false);
    // = false;
    // = rxn(i) != NULL;


    /*********************
     * Initial Condition *
     *********************/
    // FIXME: Initial condition makes it pass trivially.
    define initial_condition() : boolean
    = start == 0
        && rxn(0) == NULL
        && g(0) == {0, 0}
        && source_out(s(0)) == 0
        && component__in(s(0)) == 0
        && component_out(s(0)) == 0
        && component__s(s(0)) == 0
        && sink__in(s(0)) == 0
        ;
    // = true;


    /***************
     * K-induction *
     ***************/
    // initialization
    // initialization
    // property initialization : initial_condition() ==> prop(1);
    property initialization : initial_condition() ==>
        (forall (i : integer) ::
            (i >= START && i <= END)
                ==> (
                    prop(i)
                    && helper_invariant(i)
                ));

    // Note: state 0 needs to be unconstrained.
    // consecution
    property consecution : (forall (i : integer) ::
        (i >= START && i < END) ==> prop(i))
            ==> prop(END);
     
    //////////////////////////////////////////////////
     
    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
