/*******************************
 * Auto-generated UCLID5 model *
 ******************************/
 
module main {
 
    type    * = common.*;
    define  * = common.*;
    const   * = common.*;
     
    // Mark the start of the trace.
    var start : timestamp_t;
    assume(start == pi1(zero()));
     
    // Declare the trace
    // The counterexample reflects a particular frame of reference.
    var trace : trace_t;
    
    // Helper macro that returns an element based on index
    define elem(i : integer) : element_t
    = get(trace, i);
     
    /************
     * Topology *
     ************/
    // Return reaction priority.
    define priority(i : id_t) : integer
    = if (i == source_1_1 || i == source_2_1 || i == sink_1) then 1 else 999;
     
    // Return logical delay in a connection.
    define logical_delay(i1, i2 : id_t) : interval_t
    = if (
        (i1 == source_1_1 && i2 == sink_1)
        || (i1 == source_2_1 && i2 == sink_1)
    ) then zero() else inf();

    // Timer-related constants and macros.
    const NUM_TIMERS : integer = 0;

    define timer_period(i : id_t) : interval_t
    = inf();

    define timer_offset(i : id_t) : interval_t
    = inf();

    // Return true if two events occur on the same federate.
    define _id_same_fed(e1, e2 : element_t) : boolean
    = (id(e1) == id(e2) && id(e1) != NULL && id(e2) != NULL);

    // Return true if two events occur on different federates.
    define _id_diff_fed(e1, e2 : element_t) : boolean
    = (id(e1) == source_1_1 && id(e2) == sink_1)
        || (id(e1) == source_2_1 && id(e2) == sink_1);

    // Return true if e1 happened before e2 in the same federate,
    // by comparing the tags and the priorities of the two events.
    //
    // TODO: account for nested reactors in federates.
    define _hb_same_fed(_e1, _e2 : element_t) : boolean
    = tag_earlier(g(_e1), g(_e2)) ||
        (tag_same(g(_e1), g(_e2)) && priority(id(_e1)) < priority(id(_e2)));
    
    // Return true if e1 happened before e2 in different federates
    // and e1 has a connection to e2. This check uses the time tags
    // and the logical delay in the connection.
    //
    // FIXME: account for physical connections.
    define _hb_diff_fed(_e1, _e2 : element_t) : boolean
    = tag_earlier(tag_delay(g(_e1), logical_delay(id(_e1), id(_e2))), g(_e2))
        || tag_same(tag_delay(g(_e1), logical_delay(id(_e1), id(_e2))), g(_e2));
    
    // Check the happened-before relation between two immediate events.
    define _hb(_e1, _e2 : element_t) : boolean
    =   // If two events belong to the same federate,
        // determine hb via tags.
        // This is bi-directional.
        (_id_same_fed(_e1, _e2) && _hb_same_fed(_e1, _e2))
        // If two events belong to different federates,
        // check if a connection is present.
        // This is uni-directional.
        || (_id_diff_fed(_e1, _e2) && _hb_diff_fed(_e1, _e2));
    

    /**
     * UCLID5 Bug:
     * When g is being redefined in the existential clause,
     * the compiler returns
     *
     * ```
     * Type error line 20: Cannot apply g, which is of type integer.
     * define pi1(t : tag_t)   : timestamp_t   = t._1;         // Get timestamp from tag
     * ```
     *
     * which is very uninformative. 
     */

    // HB path with 1 ed_ge
    define hb_1(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b : integer) :: in_range(a) && in_range(b) 
        // Check if a path between e1 and e2 exists.
        && elem(a) == e1 && elem(b) == e2
        && _hb(elem(a), elem(b))
        && a < b; 
    
    // HB path with 2 ed_ges
    define hb_2(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c : integer) :: elem(a) == e1 && elem(c) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c))
        && a < b && b < c;
    
    // HB path with 3 ed_ges
    define hb_3(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d : integer) :: elem(a) == e1 && elem(d) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && a < b && b < c && c < d;
    
    // HB path with 4 ed_ges
    define hb_4(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e : integer) :: elem(a) == e1 && elem(e) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e))
        && a < b && b < c && c < d && d < e;

    // HB path with 5 ed_ges
    define hb_5(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f : integer) :: elem(a) == e1 && elem(f) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f))
        && a < b && b < c && c < d && d < e && e < f;

    // HB path with 6 ed_ges
    define hb_6(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g : integer) :: elem(a) == e1 && elem(_g) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && a < b && b < c && c < d && d < e && e < f && f < _g;

    // HB path with 7 ed_ges
    define hb_7(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g, h : integer) :: elem(a) == e1 && elem(h) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && _hb(elem(_g), elem(h))
        && a < b && b < c && c < d && d < e && e < f && f < _g && _g < h;

    // HB path with 8 ed_ges
    define hb_8(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g, h, i : integer) :: elem(a) == e1 && elem(i) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && _hb(elem(_g), elem(h)) && _hb(elem(h), elem(i))
        && a < b && b < c && c < d && d < e && e < f && f < _g && _g < h && h < i;

    // HB path with 9 ed_ges
    define hb_9(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g, h, i, j : integer) :: elem(a) == e1 && elem(j) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && _hb(elem(_g), elem(h)) && _hb(elem(h), elem(i)) && _hb(elem(i), elem(j))
        && a < b && b < c && c < d && d < e && e < f && f < _g && _g < h && h < i && i < j;

    // Transitive "happened-before" definition
    define hb(e1, e2 : element_t) : boolean
    = hb_1(e1, e2) || hb_2(e1, e2) || hb_3(e1, e2)
        || hb_4(e1, e2) || hb_5(e1, e2) || hb_6(e1, e2)
        || hb_7(e1, e2) || hb_8(e1, e2) || hb_9(e1, e2);

    /***************************
     * Topological Abstraction *
     ***************************/

    define is_multiple_of(a, b : integer) : boolean
    = exists (c : integer) :: b * c == a;
    
    define is_closest_starting_point(t : tag_t, period : integer, offset : integer) : boolean
    = (exists (c : integer) :: (period * c) + offset == pi1(t)
        // Tick at the next valid instant.
        && (period * (c - 1) + offset) < start)     
        // Timer always has mstep of 0.
        && pi2(t) == 0;                           
    
    // first & last in trace
    define first(e : element_t) : boolean
    = !(exists (i : integer) :: in_range(i) && id(elem(i)) == id(e) && tag_earlier(g(elem(i)), g(e))); 
    
    define last(e : element_t) : boolean
    = !(exists (i : integer) :: in_range(i) && id(elem(i)) == id(e) && tag_later(g(elem(i)), g(e))); 
    
    define is_triggered_by_startup(_id : id_t) : boolean
    = // If startup is within frame, put the events in the trace.
    ((start == 0) ==> (exists (i : integer) :: in_range(i)
        && id(elem(i)) == _id && tag_same(g(elem(i)), startup())))
    // Can only appear once.
    && !(exists (j : integer) :: in_range(j) && id(elem(j)) == _id
        && !tag_same(g(elem(j)), startup()));
    
    // Can directly use index as HB since this only applies to events
    // on the same federate.
    define _is_latest_invocation_in_same_fed_wrt_(a, b : integer) : boolean
    = !(exists (c : integer) :: in_range(c) 
        && id(elem(c)) == id(elem(a)) && a < c && c < b);
    
    define is_triggered_by_timer(_id : id_t) : boolean
    =   // 1. If the initial event is within frame, show it.
        (exists (i : integer) :: in_range(i)
        && id(elem(i)) == _id
        && is_closest_starting_point(g(elem(i)), pi1(timer_period(_id)),
            pi1(timer_offset(_id))))
        // 2. The SPACING between two consecutive timers is the period.
        && (forall (i, j : integer) :: (in_range(i) && in_range(j) && i < j
            && id(elem(i)) == _id && id(elem(j)) == _id
            // ...and there does not exist a 3rd invocation in between
            && !(exists (k : integer) :: id(elem(k)) == _id && i < k && k < j))
                ==> g(elem(j)) == tag_schedule(g(elem(i)), timer_period(_id)))
        // 3. There does not exist other events in the same federate that 
        // differ by the last timer invocation by g(last_timer) + period.
        // In other words, this axiom ensures a timer fires when it needs to.
        //
        // a := index of the offending event that occupy the spot of a timer tick.
        // b := index of non-timer event on the same federate
        // both in_range's are needed due to !(exists), which turns into a forall.
        && !(exists (b, a : integer) :: in_range(a) && in_range(b)
            && id(elem(b)) != _id
            && _id_same_fed(elem(b), {_id, zero()})
            && id(elem(a)) == _id
            && (_is_latest_invocation_in_same_fed_wrt_(a, b)
                && tag_later(g(elem(b)), tag_schedule(g(elem(a)), timer_period(_id))) ));

    // Triggered by physical action means there is no constraint.
    define is_triggered_by_physical_action(_id : id_t) : boolean
    = true;
    
    // This includes the possibility that upstream does NOT output.
    define is_triggered_by(downstream, upstream : id_t, delay : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == downstream ==> (exists (j : integer) :: in_range(j)
            && id(elem(j)) == upstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    );

    define is_triggered_by_2(down, up1, up2 : id_t, delay, delay2 : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == down ==> (
            (exists (j : integer) :: in_range(j)
            && id(elem(j)) == up1 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
            || (exists (j : integer) :: in_range(j)
            && id(elem(j)) == up2 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay2))
    ));
    
    // This macro ensures that the upstream MUST output.
    define is_definitely_triggered_by(downstream, upstream : id_t,
        delay : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == downstream ==> (exists (j : integer) :: in_range(j)
            && id(elem(j)) == upstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    ) && 
    (forall (j : integer) :: in_range(j) ==>
        id(elem(j)) == upstream ==> (exists (i : integer) :: in_range(i)
            && id(elem(i)) == downstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    );
    
    define is_in_trace(_id : id_t) : boolean
    = (exists (i : integer) :: in_range(i) && id(elem(i)) == _id);

    /*********************
     * Reactor Semantics *
     *********************/

    // [Important] The trace should respect the HB relation.
    // In this case, there is no constraint on i, j when hb
    // fails to establish on both direction (def. of concurrent).
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> (_hb(elem(i), elem(j)) ==> i < j));
    
    // All microsteps are positive
    axiom(forall (i : integer) :: in_range(i)
        ==> pi2(g(elem(i))) >= 0);
    
    // The same event can only trigger once in a logical instant
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((id(elem(i)) == id(elem(j)) && i != j)
            ==> !tag_same(g(elem(i)), g(elem(j)))));
    
    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (id(elem(j)) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> id(elem(i)) != NULL)
    )));
    
    // All tags should be positive
    axiom(forall (i : integer) :: in_range(i) ==> (
        pi1(g(elem(i))) >= 0
    ));
    
    // Begin the frame at the start time specified.
    axiom(forall (i : integer) :: tag_same(g(elem(i)), {start, 0})
        || tag_later(g(elem(i)), {start, 0}));
     
    /*******************************
     * Application-specific axioms *
     *******************************/
    axiom(is_triggered_by_physical_action(source_1_1));
    axiom(is_triggered_by_physical_action(source_2_1));
    axiom(is_triggered_by_2(sink_1, source_1_1, source_2_1,
        logical_delay(source_1_1, sink_1), logical_delay(source_2_1, sink_1)));
     
    /* Debug case 1: only triggered by 1 port */
    axiom(exists (i : integer) :: id(elem(i)) == sink_1);
    // axiom(exists (i : integer) :: id(elem(i)) == source_1_1);
    axiom(forall (i : integer) :: in_range(i) ==> id(elem(i)) != source_1_1);
    property test : false;
     
    //////////////////////////////////////////////////
     
    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
