module main {
    type * = Common.*;

    // Channels between the scheduler and reactors
    var GeneratedDelay_to_S : event_t;
    var Source_to_S : event_t;
    var Sink_to_S : event_t;
    var S_to_GeneratedDelay : event_t;
    var S_to_Source : event_t;
    var S_to_Sink : event_t;

    var NULL_EVENT : event_t;

    instance scheduler : Scheduler(GeneratedDelay_to_S : (GeneratedDelay_to_S),
                                    Source_to_S : (Source_to_S),
                                    Sink_to_S : (Sink_to_S),
                                    S_to_GeneratedDelay : (S_to_GeneratedDelay),
                                    S_to_Source : (S_to_Source),
                                    S_to_Sink : (S_to_Sink));
    instance gd : Reactor_GeneratedDelay(t : (scheduler.t),
                                        __in__ : (S_to_GeneratedDelay),
                                        __out__ : (GeneratedDelay_to_S));
    instance sr : Reactor_Source(t : (scheduler.t),
                                __in__ : (S_to_Source),
                                __out__ : (Source_to_S));
    instance sk : Reactor_Sink(t : (scheduler.t),
                                __in__ : (S_to_Sink),
                                __out__ : (Sink_to_S));

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        GeneratedDelay_to_S = NULL_EVENT;
        Source_to_S = NULL_EVENT;
        Sink_to_S = NULL_EVENT;
        S_to_GeneratedDelay = NULL_EVENT;
        S_to_Source = NULL_EVENT;
        S_to_Sink = NULL_EVENT;
    }

    next {
        next(scheduler);
        next(gd);
        next(sr);
        next(sk);
    }

    property[LTL] value_delivered_at_the_right_time : F(scheduler.t == 100
                                                        && Sink_to_S._5 == 1);

    control {
        v = bmc(500);
        check;
        print_results;
        v.print_cex(
                    scheduler.t,
                    scheduler.event_q.contents, 
                    scheduler.event_q.op,
                    scheduler.event_q.data,
                    scheduler.event_q.count,
                    scheduler.reaction_q.contents, 
                    scheduler.reaction_q.op,
                    scheduler.reaction_q.data,
                    scheduler.reaction_q.count,
                    scheduler.eq_op,
                    scheduler.eq_data,
                    scheduler.eq_out,
                    scheduler.rq_op,
                    scheduler.rq_data,
                    scheduler.rq_out,
                    scheduler.S_to_GeneratedDelay,
                    scheduler.S_to_Source,
                    scheduler.S_to_Sink,
                    scheduler.GeneratedDelay_to_S,
                    scheduler.Source_to_S,
                    scheduler.Sink_to_S,
                    gd.__in__,
                    gd.__out__,
                    gd.y_state,
                    sr.__in__,
                    sr.__out__,
                    sk.__in__,
                    sk.__out__
        );
    }
}

/*****************
 * The main module
 *****************/
/*
module main {
    type * = EventQ.*;

    // Channel between RTI and reactors
    var A_to_RTI : event_t;
    var B_to_RTI : event_t;
    var RTI_to_A : event_t;
    var RTI_to_B : event_t;

    var NULL_EVENT : event_t;

    // TODO: rename RTI and A's input/output var names to indicate direction
    instance rti : RTI(in_A : (A_to_RTI), out_A : (RTI_to_A),
                        in_B : (B_to_RTI), out_B : (RTI_to_B));
    instance a : Reactor_A(t : (rti.t), __in__ : (RTI_to_A), __out__ : (A_to_RTI));
    instance b : Reactor_B(t : (rti.t), __in__ : (RTI_to_B), __out__ : (B_to_RTI));

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        A_to_RTI = NULL_EVENT;
        B_to_RTI = NULL_EVENT;
        RTI_to_A = NULL_EVENT;
        RTI_to_B = NULL_EVENT;

        // A convenient test case
        // A_to_RTI = { 0, A, A, A_OUT, 10, true };
    }

    next {
        next(rti); 
        next(a);
        next(b);
    }

    // A set of properties that are potentially helpful
    
    // Ensure RTI behaves correctly
    property[LTL] A_receives_valid_event : G(a.__in__._3 == A || a.__in__._3 == NULL); 
    property[LTL] B_receives_valid_event : G(b.__in__._3 == B || b.__in__._3 == NULL); 

    // Checking LF program w/ a focus on state variable.
    // Verify behavior of the reactor system
    property[LTL] s_is_eventually_1 : F(b.s == 1);
    property[LTL] s_value_that_always_hold : G(b.s == -999 || b.s >= 0);
    property[LTL] s_does_not_incr_until_input : W((b.s == 0 || b.s == -999), (b._in._4 == B_IN));

    control {
        // v = induction;
        v = bmc(10);
        check;
        print_results;
        v.print_cex(
                    rti.t,
                    rti.event_q.contents, 
                    rti.event_q.op,
                    rti.event_q.data,
                    rti.event_q.count,
                    rti.reaction_q.contents, 
                    rti.reaction_q.op,
                    rti.reaction_q.data,
                    rti.reaction_q.count,
                    rti.eq_op,
                    rti.eq_data,
                    rti.eq_out,
                    rti.rq_op,
                    rti.rq_data,
                    rti.rq_out,
                    rti.out_A,
                    rti.out_B,
                    rti.in_A,
                    rti.in_B,
                    a.__in__,
                    a.__out__,
                    b.__in__,
                    b.__out__,
                    b._in,
                    b.s
                    );
    }
}
*/
