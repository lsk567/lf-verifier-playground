/******************************
 * A list of reactor instances.
 * This section should be auto-
 * generated by the transpiler.
 *****************************/
module Reactor_SourceA {
    type * = SimpleQueue.*;
    define * = SimpleQueue.*;
    define * = Common.*;

    // We need const tuple in UCLID
    var NULL_EVENT : event_t;

    // Ports communicating with RTI
    input t : integer;

    // TODO: rename them to reflect comm. to/from RTI.
    input __in__ : event_t;
    output __out__ : event_t;

    // LF outputs, to store values after reaction execution.
    var out : event_t; // unused and accounted for by outQ

    // LF state variable
    var i : integer;

    // Logical actions
    // Encode in reaction for now

    // Physical actions
    // Cannot handle physical actions until variable bounding
    // in BMC or k-induction works

    // A list of outbound events. Since one event is passed at a time,
    // We need a place to temporary store the events that are not sent yet.
    var outQ : sq_t;
    var __pop__ : { sq_t,
                    sq_data_t };
    
    // A list of reactions
    procedure rxn_startup()
        modifies i; 
        modifies outQ, __out__, __pop__; // Internal
    {
        // [ActionDelay.lf:11] schedule(act, MSEC(0));
        outQ = pushQ(outQ, { t,  // Current time + delay
                SourceA,      // Origin
                Sink,      // Destination
                Sink_inA,  // Trigger for destination
                i,  // Payload
                true   // True 
                });
        
        // Pop a value from outQ
        // Handled in the reaction procedure for now since
        // we need a sequential update to outQ.
        __pop__ = popQ(outQ);
        outQ = __pop__._1;
        __out__ = __pop__._2;
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, NULL_NULL, -1, false };
        __out__ = NULL_EVENT;

        // Find out if this is needed.
        assume(__in__ == NULL_EVENT);

        outQ = { { NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT },
                 1, 1};

        // File specific
        // [MultiInput.lf:4] state i:int(3);
        i = 3;
    }

    next {
        if (__in__ != NULL_EVENT) {
            case
                (__in__._4 == SourceA_startup) : {
                    call () = rxn_startup();
                }
            esac
        }
        else {
            __pop__' = popQ(outQ);
            outQ' = __pop__'._1;
            __out__' = __pop__'._2;
        }
    }
}

module Reactor_SourceB {
    // type * = Common.*;
    type * = SimpleQueue.*;
    define * = SimpleQueue.*;

    // We need const tuple in UCLID
    var NULL_EVENT : event_t;

    // Ports communicating with RTI
    input t : integer;

    // TODO: rename them to reflect comm. to/from RTI.
    input __in__ : event_t;
    output __out__ : event_t;

    // LF outputs, to store values after reaction execution.
    var out : event_t; // unused and accounted for by outQ

    // LF state variable
    var j : integer;

    // Logical actions
    // Encode in reaction for now

    // Physical actions
    // Cannot handle physical actions until variable bounding
    // in BMC or k-induction works

    // A list of outbound events. Since one event is passed at a time,
    // We need a place to temporary store the events that are not sent yet.
    var outQ : sq_t;
    var __pop__ : { sq_t,
                    sq_data_t };
    
    // A list of reactions
    procedure rxn_startup()
        modifies j; 
        modifies outQ, __out__, __pop__; // Internal
    {
        // [ActionDelay.lf:11] schedule(act, MSEC(0));
        outQ = pushQ(outQ, { t,  // Current time + delay
                SourceB,      // Origin
                Sink,      // Destination
                Sink_inB,  // Trigger for destination
                j,  // Payload
                true   // True 
                });
        
        // Pop a value from outQ
        // Handled in the reaction procedure for now since
        // we need a sequential update to outQ.
        __pop__ = popQ(outQ);
        outQ = __pop__._1;
        __out__ = __pop__._2;
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, NULL_NULL, -1, false };
        __out__ = NULL_EVENT;

        // Find out if this is needed.
        assume(__in__ == NULL_EVENT);

        outQ = { { NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT },
                 1, 1};

        // File specific
        // [MultiInput.lf:4] state i:int(3);
        j = 7;
    }

    next {
        if (__in__ != NULL_EVENT) {
            case
                (__in__._4 == SourceB_startup) : {
                    call () = rxn_startup();
                }
            esac
        }
        else {
            __pop__' = popQ(outQ);
            outQ' = __pop__'._1;
            __out__' = __pop__'._2;
        }
    }
}

module Reactor_Sink {
    type * = SimpleQueue.*;
    define * = SimpleQueue.*;
    define * = Common.*;

    // We need const tuple in UCLID
    var NULL_EVENT : event_t;

    // Ports communicating with RTI
    input t : integer;

    // TODO: rename them to reflect comm. to/from RTI.
    input __in__ : event_t;
    output __out__ : event_t;

    // LF inputs
    var inA : event_t;
    var inB : event_t;

    // LF state variable
    var s : integer;

    // Logical actions
    // Encode in reaction for now

    // Physical actions
    // Cannot handle physical actions until variable bounding
    // in BMC or k-induction works

    // A list of outbound events. Since one event is passed at a time,
    // We need a place to temporary store the events that are not sent yet.
    var outQ : sq_t;
    var __pop__ : { sq_t,
                    sq_data_t };
    
    // A list of reactions
    procedure rxn_inA_inB()
        modifies s; // State variable
        modifies inA, inB; // Inputs
        modifies outQ, __out__, __pop__; // Internal
    {
        /*****************
         * Reaction body *
         *****************/
        // [MultiInput.lf] self->s = inA->value + inB->value;
        s = inA._5 + inB._5;

        // [ActionDelay.lf:11] schedule(act, MSEC(0));
        outQ = pushQ(outQ, { t,  // Current time + delay
                Sink,      // Origin
                NULL,      // Destination
                NULL_NULL, // Trigger for destination
                s,      // Payload
                true    // True 
                });
        
        /*******************
         * Post-processing *
         *******************/
        // Pop a value from outQ
        // Handled in the reaction procedure for now since
        // we need a sequential update to outQ.
        __pop__ = popQ(outQ);
        outQ = __pop__._1;
        __out__ = __pop__._2;

        // Clear inputs
        inA = NULL_EVENT;
        inB = NULL_EVENT;
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, NULL_NULL, -1, false };
        __out__ = NULL_EVENT;

        // Find out if this is needed.
        assume(__in__ == NULL_EVENT);

        outQ = { { NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT,
                 NULL_EVENT },
                 1, 1};

        // File specific
    }

    next {
        // Load __in__ onto respective input variables
        if (is_present(__in__)) {
            case 
                (__in__._4 == Sink_inA) : {
                    inA' = __in__;
                }
                (__in__._4 == Sink_inB) : {
                    inB' = __in__;
                }
            esac
        }
        else {
            // Trigger reaction
            case
                (is_present(inB) || is_present(inB)) : {
                    call () = rxn_inA_inB();
                }
                (!is_present(inA) && !is_present(inB)) : {
                    __pop__' = popQ(outQ);
                    outQ' = __pop__'._1;
                    __out__' = __pop__'._2;
                }
            esac
        }
    }
}
