module main {
    type * = Common.*;

    // Channels between the scheduler and reactors
    var SourceA_to_S : event_t;
    var SourceB_to_S : event_t;
    var Sink_to_S : event_t;
    var S_to_SourceA : event_t;
    var S_to_SourceB : event_t;
    var S_to_Sink : event_t;

    var NULL_EVENT : event_t;

    instance scheduler : Scheduler(SourceA_to_S : (SourceA_to_S),
                                    SourceB_to_S : (SourceB_to_S),
                                    Sink_to_S : (Sink_to_S),
                                    S_to_SourceA : (S_to_SourceA),
                                    S_to_SourceB : (S_to_SourceB),
                                    S_to_Sink : (S_to_Sink));
    instance a : Reactor_SourceA(t : (scheduler.t),
                                    __in__ : (S_to_SourceA),
                                    __out__ : (SourceA_to_S));
    instance b : Reactor_SourceB(t : (scheduler.t),
                                    __in__ : (S_to_SourceB),
                                    __out__ : (SourceB_to_S));
    instance s : Reactor_Sink(t : (scheduler.t),
                                    __in__ : (S_to_Sink),
                                    __out__ : (Sink_to_S));

    init {
        NULL_EVENT = { -1, NULL, NULL, NULL_NULL, -1, false };
        SourceA_to_S = NULL_EVENT;
        SourceB_to_S = NULL_EVENT;
        Sink_to_S = NULL_EVENT;
        S_to_SourceA = NULL_EVENT;
        S_to_SourceB = NULL_EVENT;
        S_to_Sink = NULL_EVENT;
    }

    next {
        next(scheduler);
        next(a);
        next(b);
        next(s);
    }

    property[LTL] value_delivered_at_the_right_time : F(scheduler.t == 0
                                                        && Sink_to_S._5 == 10);

    control {
        v = bmc(20);
        check;
        print_results;
        v.print_cex(
                    scheduler.t,
                    scheduler.event_q.contents, 
                    scheduler.event_q.op,
                    scheduler.event_q.data,
                    scheduler.event_q.count,
                    scheduler.reaction_q.contents, 
                    scheduler.reaction_q.op,
                    scheduler.reaction_q.data,
                    scheduler.reaction_q.count,
                    scheduler.eq_op,
                    scheduler.eq_data,
                    scheduler.eq_out,
                    scheduler.rq_op,
                    scheduler.rq_data,
                    scheduler.rq_out,
                    scheduler.S_to_SourceA,
                    scheduler.S_to_SourceB,
                    scheduler.S_to_Sink,
                    scheduler.SourceA_to_S,
                    scheduler.SourceB_to_S,
                    scheduler.Sink_to_S,
                    a.__in__,
                    a.__out__,
                    b.__in__,
                    b.__out__,
                    s.__in__,
                    s.__out__,
                    s.inA,
                    s.inB
        );
    }
}

