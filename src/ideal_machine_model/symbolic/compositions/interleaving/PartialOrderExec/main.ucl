module main {
    type * = Common.*;
    type * = Finalized.*;

    // Channels between the scheduler and reactors
    var Source_to_S : event_t;
    var A_to_S : event_t;
    var B_to_S : event_t;
    var S_to_Source : event_t;
    var S_to_A : event_t;
    var S_to_B : event_t;
    
    // Finalized
    var finalize_Source_startup : boolean;
    var finalize_A_in           : boolean;
    var finalize_B_in           : boolean;
    var final_to_Source         : final_tb_t;
    var final_to_A              : final_tb_t;
    var final_to_B              : final_tb_t;

    var NULL_EVENT : event_t;

    instance scheduler : Scheduler(Source_to_S : (Source_to_S),
                                    A_to_S : (A_to_S),
                                    B_to_S : (B_to_S),
                                    S_to_Source : (S_to_Source),
                                    S_to_A : (S_to_A),
                                    S_to_B : (S_to_B),
                                    finalize_Source_startup : (finalize_Source_startup),
                                    finalize_A_in : (finalize_A_in),
                                    finalize_B_in : (finalize_B_in),
                                    final_to_Source : (final_to_Source),
                                    final_to_A : (final_to_A),
                                    final_to_B : (final_to_B));
    instance src : Reactor_Source(t : (scheduler.t),
                                    __in__ : (S_to_Source),
                                    __out__ : (Source_to_S),
                                    finalized : (final_to_Source),
                                    finalize_Source_startup : (finalize_Source_startup));
    instance a : Reactor_A(t : (scheduler.t),
                                    __in__ : (S_to_A),
                                    __out__ : (A_to_S),
                                    finalized : (final_to_A),
                                    finalize_A_in : (finalize_A_in));
    instance b : Reactor_B(t : (scheduler.t),
                                    __in__ : (S_to_B),
                                    __out__ : (B_to_S),
                                    finalized : (final_to_B),
                                    finalize_B_in : (finalize_B_in));

    init {
        NULL_EVENT = { -1, NULL, NULL, NULL_NULL, -1, false };
        Source_to_S = NULL_EVENT;
        A_to_S = NULL_EVENT;
        B_to_S = NULL_EVENT;
        S_to_Source = NULL_EVENT;
        S_to_A = NULL_EVENT;
        S_to_B = NULL_EVENT;

        finalize_Source_startup = false;
        finalize_A_in = false;
        finalize_B_in = false;    

        // finalized = { false, false, false, false, false, false };
        final_to_Source  = { false, false, false };
        final_to_A       = { false, false, false };
        final_to_B       = { false, false, false };
    }

    next {
        next(scheduler);
        next(src);
        next(a);
        next(b);
    }

    /*****************************************************
     * How to use the "finally" operator in this context *
     *****************************************************/
    // Ideally: passes if there is ONE trace that can reach this state.
    // Returns CEX if NO traces can reach this state.
    //
    // Reality: sometimes an inconclusive result can also pass?
    // The state below is theoretically not reachable, but the solver
    // seems to be uncertain whether it can be reached in the future states.
    // property[LTL] reachable_a_precedes_b : F(a.s == 1 && b.s == 3);
    //
    // TODO: check that ALL traces CAN reach a state?

    // A BETTER way to formulate reachability properties: use !F(state).
    // Passes if ALL traces cannot reach this state.
    // Returns CEX if ONE (or more) trace can reach this state.
    //
    // Example:
    // Reachable, generates a trace.
    // property[LTL] all_traces_not_reachable_a_precedes_b : !F(a.s == 1 && b.s == 2);
    // Unreachable, returns pass (this can be a little counter-intuitive at first).
    // property[LTL] all_traces_not_reachable_a_precedes_b : !F(a.s == 1 && b.s == 3);
    //
    //
    //
    // TODO: investigate alternative case.
    // Check that ALL traces CAN reach a state.
    // Returns CEX if ONE (or more) trace cannot reach this state.
    //
    // Example:
    // All traces CAN reach this state.
    // property[LTL] all_traces_reachable_a_precedes_b : F(a.s == 1 && b.s == 2);
    // property[LTL] all_traces_reachable_a_precedes_b : F(a.s == -999);
    // TODO: make the alternative case work.

    /*****************
     * Main Property *
     *****************/
    // In partial order exec., since A_in and B_in are on the same level,
    // either of them can be executed first. Assuming that the error state is
    // "B precedes A", this property can expose its presence.
    property[LTL] not_reachable_b_precedes_a : !F(a.s == 0 && b.s == 2);

    control {
        v = bmc(10);
        check;
        print_results;
        v.print_cex(
                    scheduler.t,
                    scheduler.event_q.contents, 
                    scheduler.event_q.op,
                    scheduler.event_q.data,
                    scheduler.event_q.count,
                    scheduler.reaction_q.contents, 
                    scheduler.reaction_q.op,
                    scheduler.reaction_q.data,
                    scheduler.reaction_q.count,
                    scheduler.eq_op,
                    scheduler.eq_data,
                    scheduler.eq_out,
                    scheduler.rq_op,
                    scheduler.rq_data,
                    scheduler.rq_out,
                    scheduler.S_to_Source,
                    scheduler.S_to_A,
                    scheduler.S_to_B,
                    scheduler.Source_to_S,
                    scheduler.A_to_S,
                    scheduler.B_to_S,
                    src.__in__,
                    src.__out__,
                    a.__in__,
                    a.__out__,
                    a.s,
                    b.__in__,
                    b.__out__,
                    b.s,
                    final_to_Source
        );
    }
}

