target UCLID;

reactor A {
    output outB:int;
    output outC:int;
    reaction(startup) -> outB, outC {=
        outQ = pushQ(outQ, {t, A, B, B__in, 1, true});
        outQ = pushQ(outQ, {t, A, C, C__in, 2, true});
    =}
}

reactor B {
    input _in:int;
    output out:int;
    state s:int; 
    reaction(_in) -> out {=
        s = _in._5;		// Takes 1 unit of time
        s = s + (1 + 2); // Takes roughly 2 units of time
        
        outQ = pushQ(outQ, {t, B, D, D__in, s, true});
    =}
}

reactor D {
    input _in:int;
    output out:int;
    state s:int;
    reaction(_in) -> out {=
        s = _in._5 + 3;		// Takes 1 unit of time
        
        outQ = pushQ(outQ, {t, D, E, E__in, s, true});
    =}
}

reactor E {
    input _in:int;
    state s:int;
    reaction(_in) {=
        s = _in._5;
    =}
}

reactor C {
    input _in:int;
    state s:int;
    reaction(_in) {=
        s = _in._5;
        s = s + s;
        s = 1;
        s = 1 + 2 + 3 + 4;
        s = 5 + 6 + 7;
        s = 8 + 9;
    =}
}

main reactor PartialOrder {
    a = new A();
    b = new B();
    c = new C();
    d = new D();
    e = new E();
    
    a.outB -> b._in;
    a.outC -> c._in;
    b.out -> d._in;
    d.out -> e._in;
    
    preamble {=
        property[LTL] error : !F(c.s == 17 && d.s == 7);
    =}
} 