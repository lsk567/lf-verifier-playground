target UCLID;

reactor A {
    output outB:int;
    output outC:int;
    state s:int;
    
    reaction(startup) -> outB, outC {=
        s = 1;
        
        // SET(outA, self->s);
        outQ = pushQ(outQ, {t, A, B, B__in, s, true});
        // SET(outB, self->s);
		outQ = pushQ(outQ, {t, A, C, C__in, s, true});
    =}
}

reactor B {
    input _in:int;
    state s:int;
    
    reaction(_in) {=
        s = _in._5;
    =}
}

reactor C {
    input _in:int;
    state s:int;
    
    reaction(_in) {=
        s = _in._5;
    =}
}

main reactor Composite {
    a = new A();
    b = new B();
    c = new C();
    
    preamble {=
        // Assuming (b.s == 1 && c.s == 1) is an unsafe state
        property[LTL] check_if_unsafe_state_exists : !F(b.s == 1 && c.s == 1);
    =}
    
    a.outB -> b._in;
    a.outC -> c._in;
}