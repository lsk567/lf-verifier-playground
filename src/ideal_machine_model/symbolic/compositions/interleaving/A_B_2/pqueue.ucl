module EventQ
{
    type * = Common.*;

    type op_t = enum { PUSH, POP };
    type index_t = integer;
    type count_t = integer;
    type data_t = event_t;
    type queue_t = {
                    data_t,
                    data_t,
                    data_t,
                    data_t,
                    data_t
                   };

    const SIZE : integer = 5;
    
    var NULL_EVENT : data_t;

    input op : op_t;
    input data : data_t;
    output out : data_t; // Output from popQ()

    var contents : queue_t;
    var count : integer;
    var __idx__ : integer;
    var __done__ : boolean;
    // var __out_idx__ : integer;
    var __min__ : data_t; 

    define get(q : queue_t, i : integer) : data_t
    = if (i == 1) then q._1 else
        (if (i == 2) then q._2 else
            (if (i == 3) then q._3 else
                (if (i == 4) then q._4 else
                    if (i == 5) then q._5 else
                        NULL_EVENT)));

    define set(q : queue_t, i : integer, v : data_t) : queue_t
    = if (i == 1) then {v, q._2, q._3, q._4, q._5} else
        (if (i == 2) then {q._1, v, q._3, q._4, q._5} else
            (if (i == 3) then {q._1, q._2, v, q._4, q._5} else
                (if (i == 4) then {q._1, q._2, q._3, v, q._5} else (
                    if (i == 5) then {q._1, q._2, q._3, q._4, v} else
                        q))));

    define inQ(q : queue_t, v : data_t) : boolean
    = (exists (i : index_t) ::
        (i >= 1 && i <= SIZE) && get(q, i) == v);

    define isNULL(d : data_t) : integer
    = if (d == NULL_EVENT) then 1 else 0;

    define countQ(q : queue_t) : integer
    = SIZE - (isNULL(q._1) + isNULL(q._2) + isNULL(q._3) + 
                isNULL(q._4) + isNULL(q._5));

    procedure pushQ()
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __idx__, __done__;
        // requires (op == POP);
        /*
        requires (NULL_EVENT == { -1, NULL, NULL, N_NULL, -1, false });
        requires (count == countQ(contents));
        ensures ((count < SIZE
                && data != NULL_EVENT) 
                ==> (countP == count + 1
                     && inQ(contentsP, data)));
        ensures (count >= SIZE ==> countP == count);
        */
    {
        __idx__ = 1;
        __done__ = false;
        
        for (i : integer) in range(1, SIZE) {
            if (get(contents, i) == NULL_EVENT &&
                !__done__ &&
                data != NULL_EVENT)
            {
                contentsP = set(contents, i, data);
                countP = count + 1;
                __done__ = true;
            }
        }

        if (!__done__) {
            contentsP = contents;
            countP = count;
        }
    }

    procedure popQ()
        returns (
            contentsP : queue_t,
            countP : integer,
            outP : data_t
        )
        modifies __min__, __idx__;
        // requires ( op == PUSH ); // Useful for printing execution traces
        /*
        requires (op == POP);
        // Must not be empty
        requires ( exists (i : integer) ::
                    (i >= 0 && i <= END) &&
                    contents[i]._1 >= 0 );
        ensures (countP == count - 1);
        */
    {
        __min__ = get(contents, 0);
        __idx__ = 0; 

        // Find the minimum
        for (i : integer) in range(1, SIZE) {
            if (get(contents, i) != NULL_EVENT) {
                if (__min__ == NULL_EVENT) {
                    __min__ = get(contents, i);
                    __idx__ = i;
                }
                else {
                    if (get(contents, i)._1 < __min__._1) {
                        __min__ = get(contents, i);
                        __idx__ = i;
                    }
                }
            }
        }

        outP = __min__;
        contentsP = set(contents, __idx__, NULL_EVENT);
        if (outP == NULL_EVENT) {
            countP = count;
        }
        else {
            countP = count - 1;
        }
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        __idx__ = 0;
        __done__ = false;

        count = 0;
        contents = {
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT
                   };
        /*
        count = 5;
        contents = {
                    { 1, A, B, B_IN, 0, true },
                    { 2, A, B, B_IN, 0, true },
                    { 3, A, B, B_IN, 0, true },
                    { 4, A, B, B_IN, 0, true },
                    { 5, A, B, B_IN, 0, true }
        };
        */
    }

    next {
        case
            (op == PUSH) : {
                call (contents', count') = pushQ();
            }
            (op == POP) : {
                call (contents', count', out') = popQ();
            }
        esac
    }

    control {
        // v = verify(pushQ);
        v = verify(popQ);
        check;
        print_results;
        v.print_cex();
    }
}
    
module ReactionQ
{
    type * = Common.*;

    type op_t = enum { PUSH, POP };
    type index_t = integer;
    type count_t = integer;
    type data_t = event_t;
    type queue_t = {
                    data_t,
                    data_t,
                    data_t,
                    data_t,
                    data_t
                   };

    const SIZE : integer = 5;
    
    var NULL_EVENT : data_t;

    input op : op_t;
    input data : data_t;
    output out : data_t; // Output from popQ()

    var priority : [trigger_id_t]integer;
    var contents : queue_t;
    var count : integer;

    var __idx__ : integer;
    var __done__ : boolean;
    // var __out_idx__ : integer;
    var __min__ : data_t; 

    define get(q : queue_t, i : integer) : data_t
    = if (i == 1) then q._1 else
        (if (i == 2) then q._2 else
            (if (i == 3) then q._3 else
                (if (i == 4) then q._4 else
                    if (i == 5) then q._5 else
                        NULL_EVENT)));

    define set(q : queue_t, i : integer, v : data_t) : queue_t
    = if (i == 1) then {v, q._2, q._3, q._4, q._5} else
        (if (i == 2) then {q._1, v, q._3, q._4, q._5} else
            (if (i == 3) then {q._1, q._2, v, q._4, q._5} else
                (if (i == 4) then {q._1, q._2, q._3, v, q._5} else (
                    if (i == 5) then {q._1, q._2, q._3, q._4, v} else
                        q))));

    define inQ(q : queue_t, v : data_t) : boolean
    = (exists (i : index_t) ::
        (i >= 1 && i <= SIZE) && get(q, i) == v);

    define isNULL(d : data_t) : integer
    = if (d == NULL_EVENT) then 1 else 0;

    define countQ(q : queue_t) : integer
    = SIZE - (isNULL(q._1) + isNULL(q._2) + isNULL(q._3) + 
                isNULL(q._4) + isNULL(q._5));

    procedure pushQ()
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __idx__, __done__;
        // requires (op == POP);
        /*
        requires (NULL_EVENT == { -1, NULL, NULL, N_NULL, -1, false });
        requires (count == countQ(contents));
        ensures ((count < SIZE
                && data != NULL_EVENT) 
                ==> (countP == count + 1
                     && inQ(contentsP, data)));
        ensures (count >= SIZE ==> countP == count);
        */
    {
        __idx__ = 1;
        __done__ = false;
        
        for (i : integer) in range(1, SIZE) {
            if (get(contents, i) == NULL_EVENT &&
                !__done__ &&
                data != NULL_EVENT)
            {
                contentsP = set(contents, i, data);
                countP = count + 1;
                __done__ = true;
            }
        }

        if (!__done__) {
            contentsP = contents;
            countP = count;
        }
    }

    procedure popQ()
        returns (
            contentsP : queue_t,
            countP : integer,
            outP : data_t
        )
        modifies __min__, __idx__;
        // requires ( op == PUSH ); // Useful for printing execution traces
        /*
        requires (op == POP);
        // Must not be empty
        requires ( exists (i : integer) ::
                    (i >= 0 && i <= END) &&
                    contents[i]._1 >= 0 );
        ensures (countP == count - 1);
        */
    {
        __min__ = get(contents, 0);
        __idx__ = 0; 

        // Find the minimum
        for (i : integer) in range(1, SIZE) {
            if (get(contents, i) != NULL_EVENT) {
                if (__min__ == NULL_EVENT) {
                    __min__ = get(contents, i);
                    __idx__ = i;
                }
                else {
                    if (priority[get(contents, i)._4] < priority[__min__._4]) {
                        __min__ = get(contents, i);
                        __idx__ = i;
                    }
                }
            }
        }

        outP = __min__;
        contentsP = set(contents, __idx__, NULL_EVENT);
        if (outP == NULL_EVENT) {
            countP = count;
        }
        else {
            countP = count - 1;
        }
    }

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        __idx__ = 0;
        __done__ = false;

        // Priorities
        priority[A_STARTUP] = 0;
        priority[B_STARTUP] = 0;
        priority[B_IN] = 1;

        count = 0;
        contents = {
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT
                   };
        /*
        count = 5;
        contents = {
                    { 5, A, B, A_STARTUP, 0, true },
                    { 2, A, B, B_IN, 0, true },
                    { 4, A, B, B_STARTUP, 0, true },
                    { 3, A, B, B_IN, 0, true },
                    { 1, A, B, A_STARTUP, 0, true }
        };
        */

        /*****************
         * STARTUP actions
         *****************/
        count = 2;
        contents._1 = { 0, A, A, A_STARTUP, 0, true };
        contents._2 = { 0, B, B, B_STARTUP, 0, true };
    }

    next {
        case
            (op == PUSH) : {
                call (contents', count') = pushQ();
            }
            (op == POP) : {
                call (contents', count', out') = popQ();
            }
        esac
    }

    control {
        v = verify(pushQ);
        v = verify(popQ);
        check;
        print_results;
        v.print_cex();
    }
}

/*
module main {
    type * = EventQ.*;

    var eq_op : op_t;
    var eq_data : data_t;
    var eq_out : data_t;
    var rq_op : op_t;
    var rq_data : data_t;
    var rq_out : data_t;

    var NULL_EVENT : event_t;

    instance eq : EventQ(op : (eq_op), data : (eq_data), out : (eq_out));
    instance rq : ReactionQ(op : (rq_op), data : (rq_data), out : (rq_out));

    init {
        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        rq_op = POP;
        rq_data = { 1, A, B, B_IN, 5, true };
    }

    next {
        next(eq);
        next(rq);
    }

    // property invalid : (eq.count == 5);
    // property[LTL] invalid : F(eq.count == -1);
    property[LTL] invalid2 : W(rq.contents == {
                                    NULL_EVENT,
                                    NULL_EVENT,
                                    NULL_EVENT,
                                    NULL_EVENT,
                                    NULL_EVENT
                                }, rq.count == 1);

    control {
        // v = unroll(10);
        v = bmc(10);
        // v = induction;
        check;
        print_results;
        v.print_cex(
                    eq.contents,
                    eq.count,
                    eq.op,
                    eq.out,
                    rq.contents,
                    rq.count,
                    rq.op,
                    rq.out
                    );
    }
}
*/
