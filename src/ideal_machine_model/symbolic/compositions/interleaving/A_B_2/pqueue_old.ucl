module EventQ
{
    type * = Common.*;

    type op_t = enum { PUSH, POP };
    type index_t = integer;
    type count_t = integer;
    type data_t = event_t;
    type queue_t = [index_t]data_t;
    
    const END : integer = 4; // The size of pqueue is 5.
    var NULL_EVENT : data_t;

    input op : op_t;
    input data : data_t;

    output out : data_t; // Output from popQ()

    var contents : queue_t;
    var count : integer; 

    var __done__ : boolean;
    var __min__ : data_t;
    var __min_idx__ : index_t;

    define in_queue(q : [index_t]data_t, v : data_t) : boolean =
        (exists (i : index_t) ::
            (i >= 0 && i <= END) && q[i] == v);

    procedure pushQ()
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __done__;
        // requires ( op == POP ); // Useful for printing execution traces
        // requires ( data == { -2, NULL, NULL, N_NULL, -1, false } ); // Useful for printout purposes
        /*
        requires ( op == PUSH ); // OP must be PUSH
        requires ( count >= 0 && count < END + 1 ); // PQueue cannot be full. 
        // The meaning of not being full.
        requires (exists (i : integer) ::
                    (i >= 0 && i < count) && contents[i] == NULL_EVENT);
        // Require the array does not contain the element
        requires ( !in_queue(contents, data) );
        // When these two post-conditions are disabled,
        // the queue output behaves normally.
        ensures ( countP == count + 1 );
        ensures ( in_queue(contentsP, data) );
        */
    {
        __done__ = false; // To prevent repetitive updates.
        // contentsP = contents; // Can only assign to return once.
        for (i : integer) in range(0, END) {
            if (contents[i] == NULL_EVENT && 
                !__done__ &&
                data != NULL_EVENT) // important to make sure data is not null 
            {
                contentsP = contents[i -> data];
                countP = count + 1;
                __done__ = true;
            }
        }
        // Need to explicitly specify the values in the next state.
        if (!__done__) {
            contentsP = contents;
            countP = count;
        }
    }

    procedure popQ()
        returns (
            contentsP : [index_t]data_t,
            countP : integer,
            out : data_t
        )
        modifies __min__, __min_idx__;
        // requires ( op == PUSH ); // Useful for printing execution traces
        /*
        requires (op == POP);
        // Must not be empty
        requires ( exists (i : integer) ::
                    (i >= 0 && i <= END) &&
                    contents[i]._1 >= 0 );
        ensures (countP == count - 1);
        */
    {
        __min__ = contents[0];
        __min_idx__ = 0; 

        // Find the minimum
        for (i : integer) in range(0, END) {
            if (contents[i] != NULL_EVENT) {
                if (__min__ == NULL_EVENT) {
                    __min__ = contents[i];
                    __min_idx__ = i;
                }
                else {
                    if (contents[i]._1 < __min__._1) {
                        __min__ = contents[i];
                        __min_idx__ = i;
                    }
                }
            }
        }

        out = __min__;
        contentsP = contents[__min_idx__ -> NULL_EVENT];
        if (out == NULL_EVENT) {
            countP = count;
        }
        else {
            countP = count - 1;
        }
    }

    init {

        /*
        contents[0] = { 2, A, B, A_OUT, 1, true };
        contents[1] = { 1, A, B, A_OUT, 5, true };
        for (i : integer) in range(2, END) {
            contents[i] = NULL_EVENT;
        }
        */

        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        __done__ = false;
        __min__ = NULL_EVENT;

        /********************
         * A useful test case
         *******************/

        count = 0;

        // Step 1
        // count = 1;
        // contents[0] = { 0, A, A, A_STARTUP, 0, true };

        // Make the rest NULL_EVENT
        for (i : integer) in range(0, END) {
            contents[i] = NULL_EVENT;
        }
    }

    next {
        case
            (op == PUSH) : {
                call (contents', count') = pushQ();
            }
            (op == POP) : {
                call (contents', count', out') = popQ();
            }
        esac;
    }

    control {
        vPush = verify(pushQ);
        vPop = verify(popQ);
        check;
        print_results;
        vPush.print_cex();
        vPop.print_cex();
    }
}

module ReactionQ
{
    type * = Common.*;

    type op_t = enum { PUSH, POP };
    type index_t = integer;
    type count_t = integer;
    type data_t = event_t;
    type queue_t = [index_t]data_t;
    
    const END : integer = 4; // The size of pqueue is 5.
    var NULL_EVENT : data_t;

    input op : op_t;
    input data : data_t;

    output out : data_t; // Output from popQ()

    var priority : [trigger_id_t]integer; 
    var contents : queue_t;
    var count : integer; 

    var __done__ : boolean;
    var __min__ : data_t;
    var __min_idx__ : index_t;

    define in_queue(q : [index_t]data_t, v : data_t) : boolean =
        (exists (i : index_t) ::
            (i >= 0 && i <= END) && q[i] == v);

    procedure pushQ()
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __done__;
        // requires ( op == POP ); // Useful for printing execution traces
        // requires ( data == { -2, NULL, NULL, N_NULL, -1, false } ); // Useful for printout purposes
        /*
        requires ( op == PUSH ); // OP must be PUSH
        requires ( count >= 0 && count < END + 1 ); // PQueue cannot be full. 
        // The meaning of not being full.
        requires (exists (i : integer) ::
                    (i >= 0 && i < count) && contents[i] == NULL_EVENT);
        // Require the array does not contain the element
        requires ( !in_queue(contents, data) );
        // When these two post-conditions are disabled,
        // the queue output behaves normally.
        ensures ( countP == count + 1 );
        ensures ( in_queue(contentsP, data) );
        */
    {
        __done__ = false; // To prevent repetitive updates.
        // contentsP = contents; // Can only assign to return once.
        for (i : integer) in range(0, END) {
            if (contents[i] == NULL_EVENT && 
                !__done__ &&
                data != NULL_EVENT) // important to make sure data is not null 
            {
                contentsP = contents[i -> data];
                countP = count + 1;
                __done__ = true;
            }
        }
        // Need to explicitly specify the values in the next state.
        if (!__done__) {
            contentsP = contents;
            countP = count;
        }
    }

    procedure popQ()
        returns (
            contentsP : [index_t]data_t,
            countP : integer,
            out : data_t
        )
        modifies __min__, __min_idx__;
        // requires ( op == PUSH ); // Useful for printing execution traces
        /*
        requires (op == POP);
        // Must not be empty
        requires ( exists (i : integer) ::
                    (i >= 0 && i <= END) &&
                    contents[i]._1 >= 0 );
        ensures (countP == count - 1);
        */
    {
        __min__ = contents[0];
        __min_idx__ = 0; 

        // Find the minimum
        for (i : integer) in range(0, END) {
            if (contents[i] != NULL_EVENT) {
                if (__min__ == NULL_EVENT) {
                    __min__ = contents[i];
                    __min_idx__ = i;
                }
                else {
                    // Earliest deadline first scheduling
                    // Think about how to incorporate ddl.
                    // Multiple ways to generate priorities
                    // based on precedence graph.

                    // By assigning fixed priorities, choosing
                    // one of the possible assignments.

                    // Two things to look into:
                    // 1. single fixed assignemnt can capture ddl.
                    // 2. earliest ddl first is optimal in terms of feasibility.

                    // Lookup priority
                    if (priority[contents[i]._4] < priority[__min__._4]) {
                        __min__ = contents[i];
                        __min_idx__ = i;
                    }
                }
            }
        }

        out = __min__;
        contentsP = contents[__min_idx__ -> NULL_EVENT];
        if (out == NULL_EVENT) {
            countP = count;
        }
        else {
            countP = count - 1;
        }
    }

    init {

        /*********************
         * Initialize priority
         ********************/
        // Note: this should be "levels" of precedence graph
        // In C, it is based on deadlines and levels, encoded
        // in a 64 bit bit-vector. And it does earliest deadline
        // first scheduling.
        //
        // Parallel track
        // A -> B -> C
        //  \-> E -> F
        // B & E takes 9ms to exec.
        // If C deadline is violated, sets a state var true.
        // C and F both have a deadline of 10ms.
        // Verify the state variable never reaches true.
        // E -> F -> B -> C
        // B -> E -> C -> F

        // If B, C, E, F run on different cores and do not share the
        // same state variables. It is fine to have any exec. order nondet.ly.
        // But if they different deadlines and they have deadline handlers,
        // the story is different because now we nondeterminism introduced
        // in the system.

        // LF is deterministic if ddl is not violated.

        // MIT

        // Interleaving semantics. 
        // 
        // Soundness.
        // Is a particular valuation of the state variables of reactors reachable?
        // Can be answered under the assumption ddl not violated.
        //
        priority[A_STARTUP] = 0;
        priority[B_STARTUP] = 0;
        priority[B_IN] = 1;

        NULL_EVENT = { -1, NULL, NULL, N_NULL, -1, false };
        __done__ = false;
        __min__ = NULL_EVENT;

        /*****************
         * STARTUP actions
         *****************/
        count = 2;
        contents[0] = { 0, A, A, A_STARTUP, 0, true };
        contents[1] = { 0, B, B, B_STARTUP, 0, true }; // make unroll faster

        // Step 1:
        // count = 2;
        // contents[0] = { 0, A, B, B_IN, 1, true };
        // contents[1] = { 0, A, A, A_STARTUP, 0, true };

        // Make the rest NULL_EVENT
        for (i : integer) in range(2, END) {
            contents[i] = NULL_EVENT;
        }
    }

    next {
        case
            (op == PUSH) : {
                call (contents', count') = pushQ();
            }
            (op == POP) : {
                call (contents', count', out') = popQ();
            }
        esac;
    }

    control {
        vPush = verify(pushQ);
        vPop = verify(popQ);
        check;
        print_results;
        vPush.print_cex();
        vPop.print_cex();
    }
}
