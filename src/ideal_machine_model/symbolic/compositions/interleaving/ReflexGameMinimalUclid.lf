// Minimal version of ReflexGame as presented in papers.
target UCLID {
    bmc: 20
};
reactor RandomSource {
    /*
    preamble {=
        interval_t random_time() {
            return (rand() % 3) * MSEC(1);
        }
    =}
    */
    input another:int;
    output out:int;
    logical action prompt(2 secs);    
    reaction(startup) -> prompt {=
        // Random number functions are part of stdlib.h, which is included by reactor.h.
        // Set a seed for random number generation based on the current time.
        
        // srand(time(0));
        var randTime : integer;
        assume(randTime >= 0);

        // schedule(prompt, random_time());
        outQ = pushQ(outQ, {t, RandomSource_p, RandomSource_p, RandomSource_startup, randTime, true});
    =}
    reaction(prompt) -> out, prompt {=
        // printf("Hit Return!");
        // fflush(stdout);
        // SET(out, true);
        outQ = pushQ(outQ, {t, RandomSource_p, GetUserInput_g, GetUserInput_prompt, 1, true});
    =}
    reaction(another) -> prompt {=
        // schedule(prompt, random_time());
        var randTime : integer;
        assume(randTime >= 0);
        
        outQ = pushQ(outQ, {t, RandomSource_p, RandomSource_p, RandomSource_prompt, -1, true});
    =}
}
reactor GetUserInput {
    /*
    preamble {=
        // Read input characters until an EOF is received.
        // Each time a newline is received, schedule a response
        // action.
        void* read_input(void* response) {
            int c;
            while(1) {
                while((c = getchar()) != '\n') {
                    if (c == EOF) {
                        stop();
                        break;
                    }
                }
                schedule(response, 0);
                if (c == EOF) {
                    break;
                }
            }
            return NULL;
        }
    =}
	*/
    physical action response;
    state prompt_time:int;
    state time_diff:int;
    input prompt:int;
    output another:int;
    
    reaction(startup) -> response {=
        // pthread_t thread_id;
        // pthread_create(&thread_id, NULL, &read_input, response);
        
        prompt_time = 0;
        time_diff = 0;      
    =}

    reaction(response) -> another {=
        /*
        if (self->prompt_time == 0LL) {
            printf("YOU CHEATED!\n");
        } else {
            int time_in_ms = (get_logical_time() - self->prompt_time) / MSEC(1);
            printf("Response time ms: %d\n", time_in_ms);
            self->prompt_time = 0LL;
        }
        */
        havoc prompt_time;
        assume(prompt_time >= 0);
        
        if (prompt_time != 0) {
            prompt_time = 0;
        }
        
        // SET(another, true);
        outQ = pushQ(outQ, {t, GetUserInput_g, RandomSource_p, RandomSource_another, 1, true});
    =}

    reaction(prompt) {=
        // self->prompt_time = get_physical_time();
        var offset : integer;
        assume(offset > 0);
        prompt_time = prompt_time + offset;
        
        // schedule at arbitrary time
        // FIXME: should be scheduled by the scheduler
        // This is assuming that user presses the button
        // after he/she sees the prompt.
        outQ = pushQ(outQ, {t, GetUserInput_g, GetUserInput_g, GetUserInput_response, 1, true});
    =}
}
main reactor ReflexGame {
    p = new RandomSource();
    g = new GetUserInput();
    p.out -> g.prompt;
    g.another -> p.another;
    
    preamble {=
        property test : !F(g.prompt_time > 0);
    =}
}
