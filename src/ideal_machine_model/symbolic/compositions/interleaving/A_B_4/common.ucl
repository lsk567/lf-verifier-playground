/**
 * A helper module for common types and constants
 *
 * Use tuple instead of record for easy instantiation,
 * the event_t tuple is defined as [from_reactor_id,
 * to_reactor_id, time_of_release, trigger_id, token]
 *
 * Note: if type overload is enabled, the token_t field
 * can be reduced to 1 field. Otherwise, multiple token_t
 * fields are needed depending on the LF program.
 */
module Common {
    // FILE_SPECIFIC
    type reactor_id_t = enum { A, B, NULL };
    type trigger_id_t = enum { A_STARTUP, B_STARTUP, B_IN, NULL_NULL };
    type token_t      = integer; // To support "anytype"

    // COMMON
    type instant_t    = integer;
    type is_present_t = boolean;
    type event_t = {
                     instant_t,     // Tag
                     reactor_id_t,  // From
                     reactor_id_t,  // To
                     trigger_id_t,  // Trigger
                     token_t,       // Token
                     is_present_t   // Is_present
                   };

    define is_present(e : event_t) : boolean
    = (e != { -1, NULL, NULL, NULL_NULL, -1, false });
}
