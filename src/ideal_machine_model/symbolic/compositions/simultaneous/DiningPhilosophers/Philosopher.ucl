/**
 * Defines the philosopher reactor class in the dining
 * philosophers problem.
 *
 * @author Shaokai Lin
 */

module Philosopher {
    type pc_t = enum {null2, rxn0_start, rxn1_done_eating, rxn2_done_thinking, rxn3_loading_eat, rxn3_eat, rxn4_denied};
    var pc : pc_t;

    // Params
    input count : integer;
    input eating_time : integer;
    input _instance : integer;
    input thinking_time : integer;
    input starvation_threshold : integer;

    input start : boolean;
    output finished : boolean;

    input eat : boolean;
    var _eat : boolean;
    input denied : boolean;
    output hungry : boolean;
    output done : boolean;

    var times_eaten : integer;
    var times_denied: integer;
    var starving : boolean;

    // Logical actions
    var done_eating : boolean;
    var done_thinking : boolean;

    // Delays
    var delay_eating : integer;
    var delay_thinking : integer;

    // Triggered by start
    procedure rxn0()
        modifies pc;
        modifies times_eaten, times_denied, hungry;
    {
        pc = rxn0_start;

        times_eaten = 0;
        times_denied = 0;

        hungry = true;
    }

    // Triggered by done_eating
    procedure rxn1()
        modifies pc;
        modifies done_eating; // trigger, to be reset
        modifies done, done_thinking, finished;
    {
        pc = rxn1_done_eating;
        done_eating = false;

        done = true;

        if (times_eaten < count) {
            done_thinking = true;
        }
        else {
            finished = true;
        }
    }

    // Triggered by done_thinking
    procedure rxn2()
        modifies pc;
        modifies done, done_thinking; // trigger, to be reset
        modifies hungry;
    {
        pc = rxn2_done_thinking;
        done = false;
        done_thinking = false;

        hungry = true;
    }

    // Triggered by eat
    procedure rxn3_1()
        modifies pc;
        modifies _eat;
    {
        pc = rxn3_loading_eat;
        _eat = eat;
    }
    procedure rxn3_2()
        modifies pc;
        modifies _eat;
        modifies delay_eating;
        modifies hungry, times_eaten, times_denied, done_eating;
    {
        pc = rxn3_eat;
        _eat = false;
        delay_eating = eating_time;
        hungry = false; // Explicit set hungry to false

        times_eaten = times_eaten + 1;
        times_denied = 0;

        done_eating = true;
    }

    // Triggered by denied
    procedure rxn4()
        modifies pc;
        modifies delay_thinking;
        modifies times_denied, done_thinking, starving;
    {
        pc = rxn4_denied;
        delay_thinking = thinking_time;
        times_denied = times_denied + 1;

        if (times_denied > starvation_threshold) {
            starving = true;
        }

        done_thinking = true;
    }

    init {
        pc = null2;
        _eat = false;
        times_eaten = 0;
        times_denied = 0;
        done_eating = false;
        done_thinking = false;
        delay_eating = eating_time;
        delay_thinking = thinking_time;
        starving = false;
    }

    next {
        case
            (start) : {
                call () = rxn0();
            }
            (eat) : {
                call () = rxn3_1();
            }
            (_eat) : {
                if (delay_eating > 0) {
                    delay_eating' = delay_eating - 1;
                    pc' = null2;
                }
                else {
                    call () = rxn3_2();
                }
            }
            (done_eating) : {
                if (delay_thinking > 0) {
                    delay_thinking' = delay_thinking - 1;
                    pc' = null2;
                }
                else {
                    call () = rxn1();
                }
            }
            (done_thinking) : {
                call () = rxn2();
            }
            (denied) : {
                call () = rxn4();
            }
        esac
    }
}
