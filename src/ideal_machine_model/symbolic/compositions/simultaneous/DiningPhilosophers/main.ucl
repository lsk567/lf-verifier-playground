/**
 * Defines the main module of the model
 *
 * This encoding intends to perform proof by induction
 * and will use direct wiring rather than using a
 * scheduler to facilitate message transfer.
 *
 * To simplify the model, here we assume that present
 * boolean signals are true, otherwise they are absent.
 *
 * @author Shaokai Lin
 */

module main {
    var step : integer;

    const num_philosophers : bv1 = 1bv1;
    var count : bv1;
    
    var philosopher_finished : [bv1]boolean;
    var hungry : [bv1]boolean;
    var done : [bv1]boolean;
    var philosopher_start : [bv1]boolean;
    var eat : [bv1]boolean;
    var denied : [bv1]boolean;

    var start : boolean;
    var finished : boolean;

    // Temporary output variables
    var p0_finished : boolean;
    var p0_hungry : boolean;
    var p0_done : boolean;
    var p1_finished : boolean;
    var p1_hungry : boolean;
    var p1_done : boolean;

    instance a : Arbitrator(
        // Input
        philosopher_finished : (philosopher_finished),
        hungry : (hungry),
        done : (done),
        start : (start),
        // Output
        philosopher_start : (philosopher_start),
        eat : (eat),
        denied : (denied),
        finished : (finished)
    );
    instance p0 : Philosopher(
        // Constructor
        _instance : (1),
        count : (5),
        eating_time : (1),
        thinking_time : (1),
        starvation_threshold : (5),
        // Input
        start : (a.philosopher_start[0bv1]),
        eat : (a.eat[0bv1]),
        denied : (a.denied[0bv1]),
        // Output
        finished : (p0_finished),
        hungry : (p0_hungry),
        done : (p0_done)
    );
    instance p1 : Philosopher(
        // Constructor
        _instance : (2),
        count : (5),
        eating_time : (1),
        thinking_time : (1),
        starvation_threshold : (5),
        // Input
        start : (a.philosopher_start[1bv1]),
        eat : (a.eat[1bv1]),
        denied : (a.denied[1bv1]),
        // Output
        finished : (p1_finished),
        hungry : (p1_hungry),
        done : (p1_done)
    );

    procedure update_arrays()
        modifies philosopher_finished, hungry, done;
    {
        philosopher_finished[0bv1] = p0_finished;
        philosopher_finished[1bv1] = p1_finished;
        hungry[0bv1] = p0_hungry;
        hungry[1bv1] = p1_hungry;
        done[0bv1] = p0_done;
        done[1bv1] = p1_done;
    }

    init {
        step = 0;

        count = 1bv1;
        philosopher_finished[0bv1] = false;
        philosopher_finished[1bv1] = false;
        hungry[0bv1] = false;
        hungry[1bv1] = false;
        done[0bv1] = false;
        done[1bv1] = false;
        philosopher_start[0bv1] = false;
        philosopher_start[1bv1] = false;
        eat[0bv1] = false;
        eat[1bv1] = false;
        denied[0bv1] = false;
        denied[1bv1] = false;
        finished = false;

        // Temporary output variables
        p0_finished = false;
        p0_hungry = false;
        p0_done = false;
        p1_finished = false;
        p1_hungry = false;
        p1_done = false;
    }

    next {
        call () = update_arrays(); 
        next(a);
        next(p0);
        next(p1);

        step' = step + 1;
    }

    //// Deadlock-free property
    // invariant deadlock_free : (a.forks[0bv1] == a.forks[1bv1]); 

    //// Fairness property 
    // invariant no_starvation : (!p0.starving && !p1.starving);

    //// LTL properties
    // property[LTL] _step : !F(step == 1); // For debugging
    // property[LTL] deadlock_ltl : !F(a.forks[0bv1] != a.forks[1bv1]);

    // Work in progress: helper invariant tuning
    invariant no_one_starving : (!p0.starving && !p1.starving);
    invariant one_eat_at_a_time : !(a.eat[0bv1] && a.eat[1bv1]);
    invariant times_denied_ge_0 : (p0.times_denied >= 0 && p1.times_denied >= 0);
    invariant forks_bound : forall (b : bv1) :: a.forks[b] >= -1 && a.forks[b] <= 1;

    control {
        v = induction(1);
        // v = induction(5); // k-induction
        // v = bmc(20);
        check;
        print_results;
        v.print_cex(
            step,
            start,
            done,
            p0_done,
            p1_done,
            hungry,
            p0_hungry,
            p1_hungry,
            // Arbitrator
            // a.pc,
            a.arbitration_id,
            a.philosopher_start,
            a.done,
            a.hungry,
            a.forks,
            a.eat,
            a.denied,
            a.retries,
            a.start,
            // P0
            p0.pc,
            p0.start,
            p0.hungry,
            p0.eat,
            p0._eat,
            p0.delay_eating,
            p0.denied,
            p0.done,
            p0.times_eaten,
            p0.times_denied,
            p0.starving,
            p0.done_eating,
            p0.done_thinking,
            p0.delay_thinking,
            p0.eating_time,
            p0.thinking_time,
            p0.starvation_threshold,
            // P1
            p1.pc,
            p1.start,
            p1.hungry,
            p1.eat,
            p1._eat,
            p1.delay_eating,
            p1.denied,
            p1.done,
            p1.times_eaten,
            p1.times_denied,
            p1.starving,
            p1.done_eating,
            p1.done_thinking,
            p1.delay_thinking,
            p1.eating_time,
            p1.thinking_time,
            p1.starvation_threshold
        );
    }
}
