/**************************************
 * An axiomatic and operational model *
 **************************************/
// 1. This model detaches the horizon of the execution
//    from the induction step, essentially turing the
//    temporal logic formula into a FOL over a set of
//    events, improving the soundness of the approach.
// 2. Using the theory of arrays, the model places no
//    bounds on the number of events considered. Using
//    tuples, there will be a bound on the events in
//    the system limited by the size of the tuple.
//    The limit needs to be honored by the actual system
//    (by imposing an event rate-like constraint) to
//    make sure the guarantee transfer to real system.
//    This gives the inductive hypothesis a proper meaning
//    over the previous encoding, where inductive hypothesis
//    for temporal logic formula makes little sense
//    for the first k steps, there was no context.
//    For example, in 2-induction, the ind. hypo.
//    "assuming that 'alarm' exists implies
//    that there is a 'computation' 1 second earlier
//    within the prior 2 steps" makes no sense for step 0
//    and step 1, since there are no steps -2 and -1
//    to store the context, making it unable to prove
//    temporal logic formulas.

module main {
 
    /*******************************
     * Time and Related Operations *
     ******************************/
    type timestamp_t = integer; // Unit is nanoseconds
    type microstep_t = integer;
    type tag_t = {
        timestamp_t,
        microstep_t
    };
    // FIXME: in LF, the interval is an integer.
    type interval_t  = tag_t;
    
    // Projection macros
    define pi1(t : tag_t)   : timestamp_t   = t._1;         // Get timestamp from tag
    define pi2(t : tag_t)   : microstep_t   = t._2;         // Get microstep from tag
    
    // Interval constructor
    define zero() : interval_t
    = {0, 0};
    define startup() : interval_t
    = zero();
    define mstep() : interval_t
    = {0, 1};
    define nsec(t : integer) : interval_t
    = {t, 0};
    define usec(t : integer) : interval_t
    = {t * 1000, 0};
    define msec(t : integer) : interval_t
    = {t * 1000000, 0};
    define sec(t : integer) : interval_t
    = {t * 1000000000, 0};
    define inf() : interval_t
    = {-1, 0};
    
    // Helper function
    define isInf(i : interval_t) : boolean
    = pi1(i) < 0;
    
    // Tag comparison
    // Shaokai: Currently do not put infinity in tag conparison. Too confusing.
    define tag_later(t1 : tag_t, t2 : tag_t) : boolean
    = pi1(t1) > pi1(t2)
        || (pi1(t1) == pi1(t2) && pi2(t1) > pi2(t2));
    
    define tag_same(t1 : tag_t, t2 : tag_t) : boolean
    = t1 == t2;
    
    define tag_earlier(t1 : tag_t, t2 : tag_t) : boolean
    = pi1(t1) < pi1(t2)
        || (pi1(t1) == pi1(t2) && pi2(t1) < pi2(t2));
    
    // Tag algebra
    define tag_schedule(t : tag_t, i : interval_t) : tag_t
    = if (!isInf(t) && pi1(i) == 0 && !isInf(i))
        then { pi1(t), pi2(t) + 1 } // microstep delay
        else ( if (!isInf(t) && pi1(i) > 0 && !isInf(i))
            then { pi1(t) + pi1(i), 0 }
            else inf());
    
    define tag_delay(t : tag_t, i : interval_t) : tag_t
    = if (!isInf(t) && !isInf(i))
        then { pi1(t) + pi1(i), pi2(t) + pi2(i) }
        else inf();

    define tag_diff(t1, t2 : tag_t) : tag_t
    = {pi1(t1) - pi1(t2), pi2(t1) - pi2(t2)};
    
    /**********************
     * Reactions & States *
     **********************/
    type rxn_t = enum {  
        NULL,                                           // NULL 
        controller_0, controller_1, door_0, train_0     // Reactions
    };

    type state_t = {
        integer, // controller.lock
        integer, // controller.move
        integer, // door.lock
        integer  // train.move
    };
     
    /********************
     * Event Definition *
     ********************/
    type event_t    = { rxn_t, tag_t, state_t };
    //// Tuple
    const START : integer = 0;
    const END : integer = 9;
    type events_t = {
        event_t,
        event_t,
        event_t,
        event_t,
        event_t,
        event_t,
        event_t,
        event_t,
        event_t,
        event_t
    };
     
    define get(tr : events_t, i : integer) : event_t 
    = if (i == 0) then tr._1 else (
        if (i == 1) then tr._2 else (
            if (i == 2) then tr._3 else (
                if (i == 3) then tr._4 else (
                    if (i == 4) then tr._5 else (
                        if (i == 5) then tr._6 else (
                            if (i == 6) then tr._7 else (
                                if (i == 7) then tr._8 else (
                                    if (i == 8) then tr._9 else (
                                        if (i == 9) then tr._10 else (
                                            { NULL, inf(), {0,0,0,0} }
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    );
    
    // projection macros
    define rxn      (e : event_t) : rxn_t    = e._1;
    define g        (e : event_t) : tag_t    = e._2;
    define s        (e : event_t) : state_t  = e._3;
    define isNULL   (e : event_t) : boolean  = rxn(e) == NULL;

    // The current tag that has been advanced to.
    var clock : tag_t;

    // Declare the current state
    var trace : events_t;

    // Check if in array
    define inTr(E : events_t, e : event_t) : boolean =
        exists (i : integer) :: (i >= START && i <= END)
            && get(E, i) == e;
    define rxnInTr(E : events_t, _rxn : rxn_t) : boolean =
        exists (i : integer) :: (i >= START && i <= END)
            && rxn(get(E, i)) == _rxn;

    // Shaokai: For some reason, adding this axiom makes
    //          everything slower. Something is wrong with
    //          Uclid's treatment of axioms.
    // DO NOT USE. Use assume in the next block instead.
    // All events need to have positive tags
    // axiom(
    //     forall (i : integer) :: tag_later(g(get(trace, i)), zero())
    // );

    init {
        assume(
            forall (i : integer) :: (i >= START && i <= END)
                ==> (
                    rxn(get(trace, i)) == NULL
                    && g(get(trace, i)) == zero()
                )
        );

        // Clock is initialized to 0.
        assume(
            tag_same(clock, zero())
        );
    }

    next {
        // Update trace
        havoc trace;

        // Update logical time
        havoc clock;
        // assume(tag_later(clock', clock));
        // assume(
        //     pi1(clock') > pi1(clock)
        // );
        // Shaokai: We don't care whether the clock is
        //          following logical time semantics or
        //          event based semantics. Advance
        //          however you want, as long as you can
        //          find CEX.
        assume(
            tag_later(clock', clock)
            || tag_same(clock', clock)
        );

        // Each set is a subset of the next set.
        assume(
            forall (j : integer) :: (j >= START && j <= END)
                ==> (rxn(get(trace, j)) != NULL ==> inTr(trace', get(trace, j)))
        );

        /*********************
         * Reactor Semantics *
         *********************/

        // Make sure there are no "negative" tags.
        assume(
            forall (i : integer) :: (i >= START && i <= END)
                ==> (
                    tag_later(g(get(trace', i)), zero())
                    || tag_same(g(get(trace', i)), zero())
                )
        );

        // The unfolded events cannot exceed logical clock.
        assume(
            forall (i : integer) :: rxn(get(trace', i)) != NULL
                ==> (
                    tag_later(clock', g(get(trace', i)))
                    || tag_same(clock', g(get(trace', i)))
                )
        );

        // Trigger mechanism
        // If upstream exists, then downstream may exist at the next time advancement.
        assume(
            forall (i : integer) :: (i >= START && i <= END)
                ==> (
                    rxn(get(trace', i)) == door_0
                    ==> (exists (j : integer) :: j != i && j >= START && j <= END
                        && rxn(get(trace', j)) == controller_0
                        && g(get(trace', i)) == tag_schedule(g(get(trace', j)), sec(1))))
        );
        assume(
            forall (i : integer) :: (i >= START && i <= END)
                ==> (
                    rxn(get(trace', i)) == train_0
                    ==> (exists (j : integer) :: j != i && j >= START && j <= END
                        && rxn(get(trace', j)) == controller_1
                        && g(get(trace', i)) == tag_schedule(g(get(trace', j)), sec(1))))
        );
    }

    //////////////////////////////////////////////////
    define aux_inv() : boolean =
        tag_later(clock, zero()) || tag_same(clock, zero());

    invariant inv : aux_inv() && (
        rxnInTr(trace, door_0) ==> !rxnInTr(trace, controller_0)
        // rxnInTr(trace, door_0) ==> rxnInTr(trace, controller_0)
    );

    control {
        v = induction();
        check;
        print_results;
        v.print_cex;
    }
}
