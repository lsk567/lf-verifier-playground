/**
 * Parallel Timers
 *
 * A manually written model exploring the following concepts:
 * 1. A set of timer-related axioms
 * 2. An HB definition consistent with Lamport's def.
 * 3. A "parallel timers" example that illustrate multiple frames of reference.
 * 4. (TODO, NA in this exampler) Use nondeterministic variable with axioms
 *      to model the set of logical delays.
 */
module main {
 
    type    * = common.*;
    define  * = common.*;
    const   * = common.*;
     
    // Mark the start of the trace.
    var start : timestamp_t;
    assume(start == pi1(zero()));

    // The trace of a1
    var trace : trace_t;

    // Helper macro that returns an element based on index
    define elem(i : integer) : element_t
    = get(trace, i);

    /********************************
     * The Happened-Before Relation *
     *******************************/
    // Original:
    // hb(a,b) := g(a) + min(sum(max(edge_weight))) <= g(b)
    // Now taking a path-based approach.
    // Lamport: hb(a,b) := exists (p : path) :: reach(a, path) == b;
    // 
    // Check individual hb edges:
    // 1. If two invocations are in the same federate, compare tags directly.
    // 2. If two invocations belong to different federates, check if there exists
    //      a connection with a logical delay.

    /* Topology */
    // Return reaction priority.
    define priority(i : id_t) : integer
    = if (i == a1) then 1 else (
        if (i == a2) then 2 else (
            if (i == b1) then 1 else (
                if (i == b2) then 2 else (
                    999))));

    // Return logical delay in a connection.
    define connection_delay(i1, i2 : id_t) : interval_t
    = if (i1 == a2 && i2 == b2) then msec(1) else inf(); 

    // FIXME: This is somehow not used.
    // Merge logical action delay into connection delay.
    //
    // Return logical delay in an action.
    define logical_action_delay(i1, i2 : id_t) : interval_t
    = if (i1 == b1 && i2 == b2) then msec(9) else inf(); 

    // Timer-related constants and macros.
    const NUM_TIMERS : integer = 3;

    define timer_period(i : id_t) : interval_t
    = if (i == a1) then msec(10) else (
        if (i == a2) then msec(10) else (
            if (i == b1) then msec(12) else (
                inf())));

    define timer_offset(i : id_t) : interval_t
    = if (i == a1) then zero() else (
        if (i == a2) then msec(2) else (
            if (i == b1) then zero() else (
                inf())));

    // Return true if two events occur on the same federate.
    define _id_same_fed(e1, e2 : element_t) : boolean
    = (id(e1) == id(e2) && id(e1) != NULL && id(e2) != NULL)
        || (id(e1) == a1 && id(e2) == a2)
        || (id(e1) == a2 && id(e2) == a1)
        || (id(e1) == b1 && id(e2) == b2)
        || (id(e1) == b2 && id(e2) == b1);

    // Return true if two events occur on different federates.
    define _id_diff_fed(e1, e2 : element_t) : boolean
    = (id(e1) == a2 && id(e2) == b2);
    //////////////

    // Return true if e1 happened before e2 in the same federate,
    // by comparing the tags and the priorities of the two events.
    //
    // TODO: account for nested reactors in federates.
    define _hb_same_fed(_e1, _e2 : element_t) : boolean
    = tag_earlier(g(_e1), g(_e2)) ||
        (tag_same(g(_e1), g(_e2)) && priority(id(_e1)) < priority(id(_e2)));

    // Return true if e1 happened before e2 in different federates
    // and e1 has a connection to e2. This check uses the time tags
    // and the logical delay in the connection.
    //
    // FIXME: account for physical connections.
    define _hb_diff_fed(_e1, _e2 : element_t) : boolean
    = tag_earlier(tag_delay(g(_e1), connection_delay(id(_e1), id(_e2))), g(_e2))
        || tag_same(tag_delay(g(_e1), connection_delay(id(_e1), id(_e2))), g(_e2));

    // Check the happened-before relation between two immediate events.
    define _hb(_e1, _e2 : element_t) : boolean
    =   // If two events belong to the same federate,
        // determine hb via tags.
        // This is bi-directional.
        (_id_same_fed(_e1, _e2) && _hb_same_fed(_e1, _e2))
        // If two events belong to different federates,
        // check if a connection is present.
        // This is uni-directional.
        || (_id_diff_fed(_e1, _e2) && _hb_diff_fed(_e1, _e2));


    // FIXME: Is there a way to generate more customized model?
    // HB path with 1 edge
    define hb_1(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b : integer) :: in_range(a) && in_range(b) 
        // Check if a path between e1 and e2 exists.
        && elem(a) == e1 && elem(b) == e2
        && _hb(elem(a), elem(b))
        && a < b; 

    // HB path with 2 edges
    define hb_2(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c : integer) :: elem(a) == e1 && elem(c) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c))
        && a < b && b < c;
    
    // HB path with 3 edges
    define hb_3(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d : integer) :: elem(a) == e1 && elem(d) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && a < b && b < c && c < d;

    // Transitive "happened-before" definition
    define hb(e1, e2 : element_t) : boolean
    = hb_1(e1, e2) || hb_2(e1, e2) || hb_3(e1, e2);

    /*****************
     * Helper Macros *
     *****************/
    define is_multiple_of(a, b : integer) : boolean
    = exists (c : integer) :: b * c == a;

    define is_closest_starting_point(t : tag_t, period : integer, offset : integer) : boolean
    = (exists (c : integer) :: (period * c) + offset == pi1(t)
        // Tick at the next valid instant.
        && (period * (c - 1) + offset) < start)     
        // Timer always has mstep of 0.
        && pi2(t) == 0;                           

    // first & last in trace
    define first(e : element_t) : boolean
    = !(exists (i : integer) :: in_range(i) && id(elem(i)) == id(e) && tag_earlier(g(elem(i)), g(e))); 

    define last(e : element_t) : boolean
    = !(exists (i : integer) :: in_range(i) && id(elem(i)) == id(e) && tag_later(g(elem(i)), g(e))); 

    define is_triggered_by_startup(_id : id_t) : boolean
    = // If startup is within frame, put the events in the trace.
    ((start == 0) ==> (exists (i : integer) :: in_range(i)
        && id(elem(i)) == _id && tag_same(g(elem(i)), startup())))
    // Can only appear once.
    && !(exists (j : integer) :: in_range(j) && id(elem(j)) == _id
        && !tag_same(g(elem(j)), startup()));

    // Can directly use index as HB since this only applies to events
    // on the same federate.
    define _is_latest_invocation_in_same_fed_wrt_(a, b : integer) : boolean
    = !(exists (c : integer) :: in_range(c) 
        && id(elem(c)) == id(elem(a)) && a < c && c < b);

    define is_triggered_by_timer(_id : id_t) : boolean
    =   // 1. If the initial event is within frame, show it.
        (exists (i : integer) :: in_range(i)
        && id(elem(i)) == _id
        && is_closest_starting_point(g(elem(i)), pi1(timer_period(_id)),
            pi1(timer_offset(_id))))
        // 2. The SPACING between two consecutive timers is the period.
        && (forall (i, j : integer) :: (in_range(i) && in_range(j) && i < j
            && id(elem(i)) == _id && id(elem(j)) == _id
            // ...and there does not exist a 3rd invocation in between
            && !(exists (k : integer) :: id(elem(k)) == _id && i < k && k < j))
                ==> g(elem(j)) == tag_schedule(g(elem(i)), timer_period(_id)))
        // 3. There does not exist other events in the same federate that 
        // differ by the last timer invocation by g(last_timer) + period.
        // In other words, this axiom ensures a timer fires when it needs to.
        //
        // a := index of the offending event that occupy the spot of a timer tick.
        // b := index of non-timer event on the same federate
        // both in_range's are needed due to !(exists), which turns into a forall.
        && !(exists (b, a : integer) :: in_range(a) && in_range(b)
            && id(elem(b)) != _id
            && _id_same_fed(elem(b), {_id, zero()})
            && id(elem(a)) == _id
            && (_is_latest_invocation_in_same_fed_wrt_(a, b)
                && tag_later(g(elem(b)), tag_schedule(g(elem(a)), timer_period(_id))) ));
    
    // This includes the possibility that upstream does NOT output.
    define is_triggered_by(downstream, upstream : id_t, delay : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == downstream ==> (exists (j : integer) :: in_range(j)
            && id(elem(j)) == upstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    );

    // This macro ensures that the upstream MUST output.
    define is_definitely_triggered_by(downstream, upstream : id_t,
        delay : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == downstream ==> (exists (j : integer) :: in_range(j)
            && id(elem(j)) == upstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    ) && 
    (forall (j : integer) :: in_range(j) ==>
        id(elem(j)) == upstream ==> (exists (i : integer) :: in_range(i)
            && id(elem(i)) == downstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    );

    define is_in_trace(_id : id_t) : boolean
    = (exists (i : integer) :: in_range(i) && id(elem(i)) == _id);

    /**********
     * Axioms *
     **********/
    // [Not true in multi-observer. Should disable and use HB.] 
    // Display trace in timestamp order
    // axiom(forall (i, j : integer) :: (i < j && in_range(i) && in_range(j)) 
    //     ==> (tag_earlier(g(elem(i)), g(elem(j)))
    //         || tag_same(g(elem(i)), g(elem(j)))));
    
    // [Important] The trace should respect the HB relation.
    // In this case, there is no constraint on i, j when hb
    // fails to establish on both direction (def. of concurrent).
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> (_hb(elem(i), elem(j)) ==> i < j));
    
    // TODO: The following is NOT okay. Why is that? The a < b constraint seems
    //  to break it down. Need to internalize.
    // axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
    //     ==> (((hb(elem(i), elem(j)) && !hb(elem(j), elem(i))) ==> i < j) ));

    // TODO: Sanity check: there does not exist two-way HB.

    // All microsteps are positive
    axiom(forall (i : integer) :: in_range(i)
        ==> pi2(g(elem(i))) >= 0);

    // The same event can only trigger once in a logical instant
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((id(elem(i)) == id(elem(j)) && i != j)
            ==> !tag_same(g(elem(i)), g(elem(j)))));

    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (id(elem(j)) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> id(elem(i)) != NULL)
    )));
    
    // All tags should be positive
    axiom(forall (i : integer) :: in_range(i) ==> (
        pi1(g(elem(i))) >= 0
    ));

    // Begin the frame at the start time specified.
    axiom(forall (i : integer) :: tag_same(g(elem(i)), {start, 0})
        || tag_later(g(elem(i)), {start, 0}));
    
    /*******************************
     * Application-specific axioms *
     *******************************/
    // a1 is triggered by timer.
    axiom(is_triggered_by_timer(a1));

    // a2 is triggered by timer.
    axiom(is_triggered_by_timer(a2));

    // b1 is triggered by timer.
    axiom(is_triggered_by_timer(b1));

    // b2 is triggered by a1 with logical delay of 1 msec.
    axiom(is_definitely_triggered_by(b2, a2, connection_delay(a2, b2)));

    /* Debugging HB */

    // Test case 1: testing whether timers are working.
    // Disable certain events. Make sure this matches with the application-specific axioms.
    // axiom(forall (i : integer) :: in_range(i) ==> (
        // id(elem(i)) != NULL
        // && id(elem(i)) != b2 
        // && id(elem(i)) != b1
    // )); 
    // property trivial : false;
    // property b2_in_trace : !(exists (i : integer) :: id(elem(i)) == b2);
    // property two_b2_in_trace : !(exists (i, j : integer) :: id(elem(i)) == b2
    //     && id(elem(j)) == b2 && i != j);


    /**************
     * Properties *
     **************/

    // Property: trivial.
    // property test : false;

    // Check if a1 always happened before b2.
    // Remark: when logical delay set to msec(11), the counterexample is very interesting!
    // When a1 does not produce output, a1 does not happen before b2, which is CORRECT.
    //
    // In practice, HB might not be used for formulating properties.
    // An internal tool. The counterexample does not show an offending trace.
    /*
    property a1_hb_b2 : forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((id(elem(i)) == a1 && id(elem(j)) == b2)
            ==> hb(elem(i), elem(j)));
    */

    // This shows an actual offending frame of reference.
    /*
    property a1_appears_before_b2 : forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((id(elem(i)) == a1 && id(elem(j)) == b2)
            ==> i < j);
    */
    
    /* LTL Properties */
    // Case 1: p
    // define p(e : element_t) : boolean
    // = id(e) == a1;
    // define p(e : element_t) : boolean
    // = id(e) != NULL; // Is not an empty trace.
    // property prop : p(elem(0));
    
    // Case 2: X(p)
    // define p(e : element_t) : boolean
    // = id(e) == a1;
    // property prop : p(elem(1));

    // Case 3: X(X(p))
    // define p(e : element_t) : boolean
    // = id(e) == a1;
    // property prop : p(elem(2));

    // Case 4: U(p, q) operator
    // p: not b2.
    // q: yes b2.
    // U_p_q: not b2 UNTIL yes b2. Expected no CEX.
    /*
    define p5(e : element_t) : boolean
    = id(e) != b2;
    define q5(e : element_t) : boolean
    = id(e) == b2;
    define U_p5_q5() : boolean
    = exists (i : integer) :: in_range(i) && q5(elem(i))
        && (forall (j : integer) :: (0 <= j && j < i)
            ==> p5(elem(j)));
    property prop: U_p5_q5();
    */

    // Case 6: U(p, q) operator with CEX
    // p: not b2
    // q: time after 20 msec
    /*
    define p6(e : element_t) : boolean
    = id(e) != b2;
    define q6(e : element_t) : boolean
    = tag_later(g(e), msec(20));
    define U6() : boolean
    = exists (i : integer) :: in_range(i) && q6(elem(i))
        && (forall (j : integer) :: (0 <= j && j < i)
            ==> p6(elem(j)));
    property prop: U6();
    */

    // Case 7: G(). Globally cannot observe consecutive a1.
    // G((id == a1) ==> X(id != a1))
    /*
    define p7(e : element_t) : boolean
    = id(e) == a1;
    define q7(e : element_t) : boolean
    = id(e) != a1;
    define G7() : boolean
    = forall (i : integer) :: (in_range(i) && i <= (END - 1)) //
        ==> (p7(elem(i)) ==> q7(elem(i+1)));
    property prop : G7();
    */

    // Case 8: Testing F().
    // F(b2)
    // b2 eventually occurs.
    define p8(e : element_t) : boolean
    = id(e) == b2;
    define F8() : boolean
    = exists (i : integer) :: (in_range(i) && i >= 0) // i >= 0 defines temporal modality. 
        && p8(elem(i));
    property prop : F8();
     
    //////////////////////////////////////////////////
     
    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
     
}
