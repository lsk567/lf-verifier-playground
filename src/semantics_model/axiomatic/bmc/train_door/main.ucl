module main {
    
    type * = common.*;
    define * = common.*;
    const * = common.*;

    var trace_A : trace_t;
    var trace_B : trace_t;
    var trace_C : trace_t;

    // Derive axioms from the static information of the program.
    // Tag should appear in increasing order for a timeline.
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_A, i)), g(get(trace_A, j)))
            || tag_same(g(get(trace_A, i)), g(get(trace_A, j)))));
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_B, i)), g(get(trace_B, j)))
            || tag_same(g(get(trace_B, i)), g(get(trace_B, j)))));
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_C, i)), g(get(trace_C, j)))
            || tag_same(g(get(trace_C, i)), g(get(trace_C, j)))));

    // Timestamp and microstep should be non-negative.
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_A, i))) >= 0 && pi2(g(get(trace_A, i))) >= 0));
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_B, i))) >= 0 && pi2(g(get(trace_B, i))) >= 0));
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_C, i))) >= 0 && pi2(g(get(trace_C, i))) >= 0));
        
    // Each reactor only invokes its own reactions or NULL.
    axiom(forall (i : step_t) :: in_range(i) ==> (N(get(trace_A, i)) == A1) ||
                                                    N(get(trace_A, i)) == NULL);
    axiom(forall (j : step_t) :: in_range(j) ==> (N(get(trace_B, j)) == B1) ||
                                                    N(get(trace_B, j)) == NULL);
    axiom(forall (k : step_t) :: in_range(k) ==> (N(get(trace_C, k)) == C1) ||
                                                    N(get(trace_C, k)) == NULL);

    // Same reaction cannot invoke twice in the same instant
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_A, i)) == N(get(trace_A, j))
            ==> g(get(trace_A, i)) != g(get(trace_A, j))))));
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_B, i)) == N(get(trace_B, j))
            ==> g(get(trace_B, i)) != g(get(trace_B, j))))));
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_C, i)) == N(get(trace_C, j))
            ==> g(get(trace_C, i)) != g(get(trace_C, j))))));

    /*
    // FIXME: this seems to suppress all the NULL outputs.
    // (For aesthetics) NULL invocation should have a (-1, -1) tag
    axiom(forall (i : step_t) :: in_range(i) ==> (N(get(trace_A, i)) == NULL)
        ==> g(get(trace_A, i)) == {-1, -1});
    axiom(forall (i : step_t) :: in_range(i) ==> (N(get(trace_B, i)) == NULL)
        ==> g(get(trace_B, i)) == {-1, -1});
    axiom(forall (i : step_t) :: in_range(i) ==> (N(get(trace_C, i)) == NULL)
        ==> g(get(trace_C, i)) == {-1, -1});
    */

    // Connections: an invocation will be followed by a downstream invocation
    // separated by a logical delay.
    axiom(forall (i : step_t) :: N(get(trace_A, i)) == A1
        ==> (exists (j : step_t) :: N(get(trace_B, j)) == B1
            && g(get(trace_B, j)) == tag_delay(g(get(trace_A, i)), rxn_delay(A1, B1))));
    axiom(forall (i : step_t) :: N(get(trace_A, i)) == A1
        ==> (exists (j : step_t) :: N(get(trace_C, j)) == C1
            && g(get(trace_C, j)) == tag_delay(g(get(trace_A, i)), rxn_delay(A1, C1))));
    

    // Property (expect to fail): For all invocations of the controller,
    // the immediately downstream invocation of the door is before
    // the immediately downstream invocation of the train.
    property prop : forall (i: step_t) ::
        in_range(i)
            ==> N(get(trace_A, i)) == A1
            ==> (exists (j, k : step_t) ::
                    (invoke_immediately_before(get(trace_A, i), get(trace_B, j))
                    && invoke_immediately_before(get(trace_A, i), get(trace_C, k)))
                    && invoke_before(get(trace_C, k), get(trace_B, j)));

    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex();
    }
}
