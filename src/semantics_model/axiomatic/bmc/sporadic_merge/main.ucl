module main {
    
    type * = common.*;
    define * = common.*;
    const * = common.*;

    var trace_A : trace_t;
    var trace_B : trace_t;

    // Derive axioms from the static information of the program.
    // Tag should appear in increasing order for a timeline.
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_A, i)), g(get(trace_A, j)))
            || tag_same(g(get(trace_A, i)), g(get(trace_A, j)))));
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_B, i)), g(get(trace_B, j)))
            || tag_same(g(get(trace_B, i)), g(get(trace_B, j)))));

    // Timestamp and microstep should be non-negative.
    // FIXME: microsteps are disabled for now for simplicity.
    //          When enabled, there are some edge cases regarding
    //          microsteps and latency and sporadic def. that make
    //          things complicated.
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_A, i))) >= 0 && pi2(g(get(trace_A, i))) == 0));
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_B, i))) >= 0 && pi2(g(get(trace_B, i))) == 0));
        
    // Each reactor only invokes its own reactions or NULL.
    axiom(forall (i : step_t) :: in_range(i) ==> (N(get(trace_A, i)) == A1) ||
                                                    N(get(trace_A, i)) == NULL);
    axiom(forall (j : step_t) :: in_range(j) ==> (N(get(trace_B, j)) == B1) ||
                                                    N(get(trace_B, j)) == NULL);

    // Same reaction cannot invoke twice in the same instant
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_A, i)) == N(get(trace_A, j))
            ==> g(get(trace_A, i)) != g(get(trace_A, j))))));
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_B, i)) == N(get(trace_B, j))
            ==> g(get(trace_B, i)) != g(get(trace_B, j))))));

    // Physical actions with minimum spacing
    // Assuming min_spacing is 10
    // Helper macro
    define are_consecutive_invocations_of_same_rxn(trace: trace_t, 
        a, b : step_t) : boolean
    = (N(get(trace, a)) == N(get(trace, b)) && a < b
        && !(exists (k : step_t) :: (a < k && k < b
            && N(get(trace, k)) == N(get(trace, a)))));

    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> are_consecutive_invocations_of_same_rxn(trace_A, i, j)
            ==> latency(get(trace_A, i), get(trace_A, j)) >= 10);
    
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> are_consecutive_invocations_of_same_rxn(trace_B, i, j)
            ==> latency(get(trace_B, i), get(trace_B, j)) >= 10);


    // The event stream is sporadic
    property prop1 : sporadic(0, trace_A, A1, 10);
    property prop2 : sporadic(0, trace_B, B1, 10);

    // FIXME: hard to debug
    // Property: For all minimum spacing m, there exists traces A B C,
    //           such that trace C is not sporadic.
    property prop4 : forall (m : integer) :: m > 0
        && !(exists (trace : trace_t) :: (

            // Tag should appear in increasing order for a timeline.
            (forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
                ==> (tag_earlier(g(get(trace, i)), g(get(trace, j)))
                || tag_same(g(get(trace, i)), g(get(trace, j)))))

            // Timestamp and microstep should be non-negative.
            && (forall (i : step_t) :: in_range(i)
                ==> (pi1(g(get(trace, i))) >= 0 && pi2(g(get(trace, i))) == 0))

            // Each reactor only invokes its own reactions or NULL.
            && (forall (k : step_t) :: in_range(k) ==> (N(get(trace, k)) == C1) ||
                                                    N(get(trace, k)) == NULL)

            // Same reaction cannot invoke twice in the same instant
            && (forall (i, j : step_t) :: (in_range(i) && in_range(j))
                ==> (i != j ==> ((N(get(trace, i)) == N(get(trace, j))
                ==> g(get(trace, i)) != g(get(trace, j))))))

            // Connections
            && (forall (i : step_t) :: N(get(trace_A, i)) == A1
                ==> (exists (j : step_t) :: N(get(trace, j)) == C1
                && g(get(trace, j)) == tag_delay(g(get(trace_A, i)), rxn_delay(A1, C1))))
            && (forall (i : step_t) :: N(get(trace_B, i)) == B1
                ==> (exists (j : step_t) :: N(get(trace, j)) == C1
                && g(get(trace, j)) == tag_delay(g(get(trace_B, i)), rxn_delay(B1, C1))))
            && (forall (i : step_t) :: N(get(trace, i)) == C1
                ==> (exists (j : step_t) ::
                    ((N(get(trace_A, j)) == A1
                        && invoke_immediately_before(get(trace_A, j), get(trace, i)))
                    || (N(get(trace_B, j)) == B1
                        && invoke_immediately_before(get(trace_B, j), get(trace, i))))))

            // Trace C is not sporadic
            && !sporadic(0, trace, C1, m)
        ));

    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex();
    }
}
